/*
Kubernetes

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.27.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// FlowcontrolApiserverV1beta3ApiService FlowcontrolApiserverV1beta3Api service
type FlowcontrolApiserverV1beta3ApiService service

type ApiCreateFlowcontrolApiserverV1beta3FlowSchemaRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	body *IoK8sApiFlowcontrolV1beta3FlowSchema
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

func (r ApiCreateFlowcontrolApiserverV1beta3FlowSchemaRequest) Body(body IoK8sApiFlowcontrolV1beta3FlowSchema) ApiCreateFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiCreateFlowcontrolApiserverV1beta3FlowSchemaRequest) Pretty(pretty string) ApiCreateFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiCreateFlowcontrolApiserverV1beta3FlowSchemaRequest) DryRun(dryRun string) ApiCreateFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiCreateFlowcontrolApiserverV1beta3FlowSchemaRequest) FieldManager(fieldManager string) ApiCreateFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiCreateFlowcontrolApiserverV1beta3FlowSchemaRequest) FieldValidation(fieldValidation string) ApiCreateFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiCreateFlowcontrolApiserverV1beta3FlowSchemaRequest) Execute() (*IoK8sApiFlowcontrolV1beta3FlowSchema, *http.Response, error) {
	return r.ApiService.CreateFlowcontrolApiserverV1beta3FlowSchemaExecute(r)
}

/*
CreateFlowcontrolApiserverV1beta3FlowSchema Method for CreateFlowcontrolApiserverV1beta3FlowSchema

create a FlowSchema

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateFlowcontrolApiserverV1beta3FlowSchemaRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) CreateFlowcontrolApiserverV1beta3FlowSchema(ctx context.Context) ApiCreateFlowcontrolApiserverV1beta3FlowSchemaRequest {
	return ApiCreateFlowcontrolApiserverV1beta3FlowSchemaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApiFlowcontrolV1beta3FlowSchema
func (a *FlowcontrolApiserverV1beta3ApiService) CreateFlowcontrolApiserverV1beta3FlowSchemaExecute(r ApiCreateFlowcontrolApiserverV1beta3FlowSchemaRequest) (*IoK8sApiFlowcontrolV1beta3FlowSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiFlowcontrolV1beta3FlowSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.CreateFlowcontrolApiserverV1beta3FlowSchema")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	body *IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

func (r ApiCreateFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Body(body IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration) ApiCreateFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiCreateFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Pretty(pretty string) ApiCreateFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiCreateFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) DryRun(dryRun string) ApiCreateFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiCreateFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) FieldManager(fieldManager string) ApiCreateFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiCreateFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) FieldValidation(fieldValidation string) ApiCreateFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiCreateFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Execute() (*IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration, *http.Response, error) {
	return r.ApiService.CreateFlowcontrolApiserverV1beta3PriorityLevelConfigurationExecute(r)
}

/*
CreateFlowcontrolApiserverV1beta3PriorityLevelConfiguration Method for CreateFlowcontrolApiserverV1beta3PriorityLevelConfiguration

create a PriorityLevelConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) CreateFlowcontrolApiserverV1beta3PriorityLevelConfiguration(ctx context.Context) ApiCreateFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	return ApiCreateFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration
func (a *FlowcontrolApiserverV1beta3ApiService) CreateFlowcontrolApiserverV1beta3PriorityLevelConfigurationExecute(r ApiCreateFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) (*IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.CreateFlowcontrolApiserverV1beta3PriorityLevelConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	pretty *string
	continue_ *string
	dryRun *string
	fieldSelector *string
	gracePeriodSeconds *int32
	labelSelector *string
	limit *int32
	orphanDependents *bool
	propagationPolicy *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	body *IoK8sApimachineryPkgApisMetaV1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest) Pretty(pretty string) ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest {
	r.pretty = &pretty
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest) Continue_(continue_ string) ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest {
	r.continue_ = &continue_
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest) DryRun(dryRun string) ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest {
	r.dryRun = &dryRun
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest) FieldSelector(fieldSelector string) ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest) LabelSelector(labelSelector string) ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest) Limit(limit int32) ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest {
	r.limit = &limit
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest) OrphanDependents(orphanDependents bool) ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest) PropagationPolicy(propagationPolicy string) ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest) ResourceVersion(resourceVersion string) ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest) ResourceVersionMatch(resourceVersionMatch string) ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest) SendInitialEvents(sendInitialEvents bool) ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest) TimeoutSeconds(timeoutSeconds int32) ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest) Body(body IoK8sApimachineryPkgApisMetaV1DeleteOptions) ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest {
	r.body = &body
	return r
}

func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	return r.ApiService.DeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaExecute(r)
}

/*
DeleteFlowcontrolApiserverV1beta3CollectionFlowSchema Method for DeleteFlowcontrolApiserverV1beta3CollectionFlowSchema

delete collection of FlowSchema

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) DeleteFlowcontrolApiserverV1beta3CollectionFlowSchema(ctx context.Context) ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest {
	return ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1Status
func (a *FlowcontrolApiserverV1beta3ApiService) DeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaExecute(r ApiDeleteFlowcontrolApiserverV1beta3CollectionFlowSchemaRequest) (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.DeleteFlowcontrolApiserverV1beta3CollectionFlowSchema")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.gracePeriodSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gracePeriodSeconds", r.gracePeriodSeconds, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orphanDependents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphanDependents", r.orphanDependents, "")
	}
	if r.propagationPolicy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "propagationPolicy", r.propagationPolicy, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	pretty *string
	continue_ *string
	dryRun *string
	fieldSelector *string
	gracePeriodSeconds *int32
	labelSelector *string
	limit *int32
	orphanDependents *bool
	propagationPolicy *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	body *IoK8sApimachineryPkgApisMetaV1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest) Pretty(pretty string) ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest {
	r.pretty = &pretty
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest) Continue_(continue_ string) ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest {
	r.continue_ = &continue_
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest) DryRun(dryRun string) ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest {
	r.dryRun = &dryRun
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest) FieldSelector(fieldSelector string) ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest) LabelSelector(labelSelector string) ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest) Limit(limit int32) ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest {
	r.limit = &limit
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest) OrphanDependents(orphanDependents bool) ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest) PropagationPolicy(propagationPolicy string) ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest) ResourceVersion(resourceVersion string) ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest) ResourceVersionMatch(resourceVersionMatch string) ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest) SendInitialEvents(sendInitialEvents bool) ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest) TimeoutSeconds(timeoutSeconds int32) ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest) Body(body IoK8sApimachineryPkgApisMetaV1DeleteOptions) ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest {
	r.body = &body
	return r
}

func (r ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	return r.ApiService.DeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationExecute(r)
}

/*
DeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfiguration Method for DeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfiguration

delete collection of PriorityLevelConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) DeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfiguration(ctx context.Context) ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest {
	return ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1Status
func (a *FlowcontrolApiserverV1beta3ApiService) DeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationExecute(r ApiDeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfigurationRequest) (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.DeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.gracePeriodSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gracePeriodSeconds", r.gracePeriodSeconds, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orphanDependents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphanDependents", r.orphanDependents, "")
	}
	if r.propagationPolicy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "propagationPolicy", r.propagationPolicy, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteFlowcontrolApiserverV1beta3FlowSchemaRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	name string
	pretty *string
	dryRun *string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	body *IoK8sApimachineryPkgApisMetaV1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteFlowcontrolApiserverV1beta3FlowSchemaRequest) Pretty(pretty string) ApiDeleteFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteFlowcontrolApiserverV1beta3FlowSchemaRequest) DryRun(dryRun string) ApiDeleteFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.dryRun = &dryRun
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteFlowcontrolApiserverV1beta3FlowSchemaRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteFlowcontrolApiserverV1beta3FlowSchemaRequest) OrphanDependents(orphanDependents bool) ApiDeleteFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteFlowcontrolApiserverV1beta3FlowSchemaRequest) PropagationPolicy(propagationPolicy string) ApiDeleteFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteFlowcontrolApiserverV1beta3FlowSchemaRequest) Body(body IoK8sApimachineryPkgApisMetaV1DeleteOptions) ApiDeleteFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.body = &body
	return r
}

func (r ApiDeleteFlowcontrolApiserverV1beta3FlowSchemaRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	return r.ApiService.DeleteFlowcontrolApiserverV1beta3FlowSchemaExecute(r)
}

/*
DeleteFlowcontrolApiserverV1beta3FlowSchema Method for DeleteFlowcontrolApiserverV1beta3FlowSchema

delete a FlowSchema

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the FlowSchema
 @return ApiDeleteFlowcontrolApiserverV1beta3FlowSchemaRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) DeleteFlowcontrolApiserverV1beta3FlowSchema(ctx context.Context, name string) ApiDeleteFlowcontrolApiserverV1beta3FlowSchemaRequest {
	return ApiDeleteFlowcontrolApiserverV1beta3FlowSchemaRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1Status
func (a *FlowcontrolApiserverV1beta3ApiService) DeleteFlowcontrolApiserverV1beta3FlowSchemaExecute(r ApiDeleteFlowcontrolApiserverV1beta3FlowSchemaRequest) (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.DeleteFlowcontrolApiserverV1beta3FlowSchema")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.gracePeriodSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gracePeriodSeconds", r.gracePeriodSeconds, "")
	}
	if r.orphanDependents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphanDependents", r.orphanDependents, "")
	}
	if r.propagationPolicy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "propagationPolicy", r.propagationPolicy, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	name string
	pretty *string
	dryRun *string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	body *IoK8sApimachineryPkgApisMetaV1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Pretty(pretty string) ApiDeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) DryRun(dryRun string) ApiDeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.dryRun = &dryRun
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) OrphanDependents(orphanDependents bool) ApiDeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) PropagationPolicy(propagationPolicy string) ApiDeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Body(body IoK8sApimachineryPkgApisMetaV1DeleteOptions) ApiDeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.body = &body
	return r
}

func (r ApiDeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	return r.ApiService.DeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationExecute(r)
}

/*
DeleteFlowcontrolApiserverV1beta3PriorityLevelConfiguration Method for DeleteFlowcontrolApiserverV1beta3PriorityLevelConfiguration

delete a PriorityLevelConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the PriorityLevelConfiguration
 @return ApiDeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) DeleteFlowcontrolApiserverV1beta3PriorityLevelConfiguration(ctx context.Context, name string) ApiDeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	return ApiDeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1Status
func (a *FlowcontrolApiserverV1beta3ApiService) DeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationExecute(r ApiDeleteFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.DeleteFlowcontrolApiserverV1beta3PriorityLevelConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.gracePeriodSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gracePeriodSeconds", r.gracePeriodSeconds, "")
	}
	if r.orphanDependents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphanDependents", r.orphanDependents, "")
	}
	if r.propagationPolicy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "propagationPolicy", r.propagationPolicy, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFlowcontrolApiserverV1beta3APIResourcesRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
}

func (r ApiGetFlowcontrolApiserverV1beta3APIResourcesRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1APIResourceList, *http.Response, error) {
	return r.ApiService.GetFlowcontrolApiserverV1beta3APIResourcesExecute(r)
}

/*
GetFlowcontrolApiserverV1beta3APIResources Method for GetFlowcontrolApiserverV1beta3APIResources

get available resources

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFlowcontrolApiserverV1beta3APIResourcesRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) GetFlowcontrolApiserverV1beta3APIResources(ctx context.Context) ApiGetFlowcontrolApiserverV1beta3APIResourcesRequest {
	return ApiGetFlowcontrolApiserverV1beta3APIResourcesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1APIResourceList
func (a *FlowcontrolApiserverV1beta3ApiService) GetFlowcontrolApiserverV1beta3APIResourcesExecute(r ApiGetFlowcontrolApiserverV1beta3APIResourcesRequest) (*IoK8sApimachineryPkgApisMetaV1APIResourceList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1APIResourceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.GetFlowcontrolApiserverV1beta3APIResources")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	pretty *string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest) Pretty(pretty string) ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.pretty = &pretty
	return r
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest) Continue_(continue_ string) ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest) FieldSelector(fieldSelector string) ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest) LabelSelector(labelSelector string) ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest) Limit(limit int32) ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.limit = &limit
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest) ResourceVersion(resourceVersion string) ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest) SendInitialEvents(sendInitialEvents bool) ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest) TimeoutSeconds(timeoutSeconds int32) ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest) Watch(watch bool) ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.watch = &watch
	return r
}

func (r ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest) Execute() (*IoK8sApiFlowcontrolV1beta3FlowSchemaList, *http.Response, error) {
	return r.ApiService.ListFlowcontrolApiserverV1beta3FlowSchemaExecute(r)
}

/*
ListFlowcontrolApiserverV1beta3FlowSchema Method for ListFlowcontrolApiserverV1beta3FlowSchema

list or watch objects of kind FlowSchema

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) ListFlowcontrolApiserverV1beta3FlowSchema(ctx context.Context) ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest {
	return ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApiFlowcontrolV1beta3FlowSchemaList
func (a *FlowcontrolApiserverV1beta3ApiService) ListFlowcontrolApiserverV1beta3FlowSchemaExecute(r ApiListFlowcontrolApiserverV1beta3FlowSchemaRequest) (*IoK8sApiFlowcontrolV1beta3FlowSchemaList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiFlowcontrolV1beta3FlowSchemaList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.ListFlowcontrolApiserverV1beta3FlowSchema")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	pretty *string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Pretty(pretty string) ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.pretty = &pretty
	return r
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Continue_(continue_ string) ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) FieldSelector(fieldSelector string) ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) LabelSelector(labelSelector string) ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Limit(limit int32) ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.limit = &limit
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) ResourceVersion(resourceVersion string) ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) SendInitialEvents(sendInitialEvents bool) ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) TimeoutSeconds(timeoutSeconds int32) ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Watch(watch bool) ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.watch = &watch
	return r
}

func (r ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Execute() (*IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationList, *http.Response, error) {
	return r.ApiService.ListFlowcontrolApiserverV1beta3PriorityLevelConfigurationExecute(r)
}

/*
ListFlowcontrolApiserverV1beta3PriorityLevelConfiguration Method for ListFlowcontrolApiserverV1beta3PriorityLevelConfiguration

list or watch objects of kind PriorityLevelConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) ListFlowcontrolApiserverV1beta3PriorityLevelConfiguration(ctx context.Context) ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	return ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationList
func (a *FlowcontrolApiserverV1beta3ApiService) ListFlowcontrolApiserverV1beta3PriorityLevelConfigurationExecute(r ApiListFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) (*IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiFlowcontrolV1beta3PriorityLevelConfigurationList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.ListFlowcontrolApiserverV1beta3PriorityLevelConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFlowcontrolApiserverV1beta3FlowSchemaRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	name string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
	force *bool
}

func (r ApiPatchFlowcontrolApiserverV1beta3FlowSchemaRequest) Body(body map[string]interface{}) ApiPatchFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiPatchFlowcontrolApiserverV1beta3FlowSchemaRequest) Pretty(pretty string) ApiPatchFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchFlowcontrolApiserverV1beta3FlowSchemaRequest) DryRun(dryRun string) ApiPatchFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchFlowcontrolApiserverV1beta3FlowSchemaRequest) FieldManager(fieldManager string) ApiPatchFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiPatchFlowcontrolApiserverV1beta3FlowSchemaRequest) FieldValidation(fieldValidation string) ApiPatchFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.fieldValidation = &fieldValidation
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchFlowcontrolApiserverV1beta3FlowSchemaRequest) Force(force bool) ApiPatchFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.force = &force
	return r
}

func (r ApiPatchFlowcontrolApiserverV1beta3FlowSchemaRequest) Execute() (*IoK8sApiFlowcontrolV1beta3FlowSchema, *http.Response, error) {
	return r.ApiService.PatchFlowcontrolApiserverV1beta3FlowSchemaExecute(r)
}

/*
PatchFlowcontrolApiserverV1beta3FlowSchema Method for PatchFlowcontrolApiserverV1beta3FlowSchema

partially update the specified FlowSchema

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the FlowSchema
 @return ApiPatchFlowcontrolApiserverV1beta3FlowSchemaRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) PatchFlowcontrolApiserverV1beta3FlowSchema(ctx context.Context, name string) ApiPatchFlowcontrolApiserverV1beta3FlowSchemaRequest {
	return ApiPatchFlowcontrolApiserverV1beta3FlowSchemaRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApiFlowcontrolV1beta3FlowSchema
func (a *FlowcontrolApiserverV1beta3ApiService) PatchFlowcontrolApiserverV1beta3FlowSchemaExecute(r ApiPatchFlowcontrolApiserverV1beta3FlowSchemaRequest) (*IoK8sApiFlowcontrolV1beta3FlowSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiFlowcontrolV1beta3FlowSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.PatchFlowcontrolApiserverV1beta3FlowSchema")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFlowcontrolApiserverV1beta3FlowSchemaStatusRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	name string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
	force *bool
}

func (r ApiPatchFlowcontrolApiserverV1beta3FlowSchemaStatusRequest) Body(body map[string]interface{}) ApiPatchFlowcontrolApiserverV1beta3FlowSchemaStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiPatchFlowcontrolApiserverV1beta3FlowSchemaStatusRequest) Pretty(pretty string) ApiPatchFlowcontrolApiserverV1beta3FlowSchemaStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchFlowcontrolApiserverV1beta3FlowSchemaStatusRequest) DryRun(dryRun string) ApiPatchFlowcontrolApiserverV1beta3FlowSchemaStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchFlowcontrolApiserverV1beta3FlowSchemaStatusRequest) FieldManager(fieldManager string) ApiPatchFlowcontrolApiserverV1beta3FlowSchemaStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiPatchFlowcontrolApiserverV1beta3FlowSchemaStatusRequest) FieldValidation(fieldValidation string) ApiPatchFlowcontrolApiserverV1beta3FlowSchemaStatusRequest {
	r.fieldValidation = &fieldValidation
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchFlowcontrolApiserverV1beta3FlowSchemaStatusRequest) Force(force bool) ApiPatchFlowcontrolApiserverV1beta3FlowSchemaStatusRequest {
	r.force = &force
	return r
}

func (r ApiPatchFlowcontrolApiserverV1beta3FlowSchemaStatusRequest) Execute() (*IoK8sApiFlowcontrolV1beta3FlowSchema, *http.Response, error) {
	return r.ApiService.PatchFlowcontrolApiserverV1beta3FlowSchemaStatusExecute(r)
}

/*
PatchFlowcontrolApiserverV1beta3FlowSchemaStatus Method for PatchFlowcontrolApiserverV1beta3FlowSchemaStatus

partially update status of the specified FlowSchema

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the FlowSchema
 @return ApiPatchFlowcontrolApiserverV1beta3FlowSchemaStatusRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) PatchFlowcontrolApiserverV1beta3FlowSchemaStatus(ctx context.Context, name string) ApiPatchFlowcontrolApiserverV1beta3FlowSchemaStatusRequest {
	return ApiPatchFlowcontrolApiserverV1beta3FlowSchemaStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApiFlowcontrolV1beta3FlowSchema
func (a *FlowcontrolApiserverV1beta3ApiService) PatchFlowcontrolApiserverV1beta3FlowSchemaStatusExecute(r ApiPatchFlowcontrolApiserverV1beta3FlowSchemaStatusRequest) (*IoK8sApiFlowcontrolV1beta3FlowSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiFlowcontrolV1beta3FlowSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.PatchFlowcontrolApiserverV1beta3FlowSchemaStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	name string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
	force *bool
}

func (r ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Body(body map[string]interface{}) ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Pretty(pretty string) ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) DryRun(dryRun string) ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) FieldManager(fieldManager string) ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) FieldValidation(fieldValidation string) ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.fieldValidation = &fieldValidation
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Force(force bool) ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.force = &force
	return r
}

func (r ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Execute() (*IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration, *http.Response, error) {
	return r.ApiService.PatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationExecute(r)
}

/*
PatchFlowcontrolApiserverV1beta3PriorityLevelConfiguration Method for PatchFlowcontrolApiserverV1beta3PriorityLevelConfiguration

partially update the specified PriorityLevelConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the PriorityLevelConfiguration
 @return ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) PatchFlowcontrolApiserverV1beta3PriorityLevelConfiguration(ctx context.Context, name string) ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	return ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration
func (a *FlowcontrolApiserverV1beta3ApiService) PatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationExecute(r ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) (*IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.PatchFlowcontrolApiserverV1beta3PriorityLevelConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	name string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
	force *bool
}

func (r ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest) Body(body map[string]interface{}) ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest) Pretty(pretty string) ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest) DryRun(dryRun string) ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest) FieldManager(fieldManager string) ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest) FieldValidation(fieldValidation string) ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest {
	r.fieldValidation = &fieldValidation
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest) Force(force bool) ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest {
	r.force = &force
	return r
}

func (r ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest) Execute() (*IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration, *http.Response, error) {
	return r.ApiService.PatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusExecute(r)
}

/*
PatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus Method for PatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus

partially update status of the specified PriorityLevelConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the PriorityLevelConfiguration
 @return ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) PatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus(ctx context.Context, name string) ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest {
	return ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration
func (a *FlowcontrolApiserverV1beta3ApiService) PatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusExecute(r ApiPatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest) (*IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.PatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadFlowcontrolApiserverV1beta3FlowSchemaRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	name string
	pretty *string
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReadFlowcontrolApiserverV1beta3FlowSchemaRequest) Pretty(pretty string) ApiReadFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.pretty = &pretty
	return r
}

func (r ApiReadFlowcontrolApiserverV1beta3FlowSchemaRequest) Execute() (*IoK8sApiFlowcontrolV1beta3FlowSchema, *http.Response, error) {
	return r.ApiService.ReadFlowcontrolApiserverV1beta3FlowSchemaExecute(r)
}

/*
ReadFlowcontrolApiserverV1beta3FlowSchema Method for ReadFlowcontrolApiserverV1beta3FlowSchema

read the specified FlowSchema

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the FlowSchema
 @return ApiReadFlowcontrolApiserverV1beta3FlowSchemaRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) ReadFlowcontrolApiserverV1beta3FlowSchema(ctx context.Context, name string) ApiReadFlowcontrolApiserverV1beta3FlowSchemaRequest {
	return ApiReadFlowcontrolApiserverV1beta3FlowSchemaRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApiFlowcontrolV1beta3FlowSchema
func (a *FlowcontrolApiserverV1beta3ApiService) ReadFlowcontrolApiserverV1beta3FlowSchemaExecute(r ApiReadFlowcontrolApiserverV1beta3FlowSchemaRequest) (*IoK8sApiFlowcontrolV1beta3FlowSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiFlowcontrolV1beta3FlowSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.ReadFlowcontrolApiserverV1beta3FlowSchema")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadFlowcontrolApiserverV1beta3FlowSchemaStatusRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	name string
	pretty *string
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReadFlowcontrolApiserverV1beta3FlowSchemaStatusRequest) Pretty(pretty string) ApiReadFlowcontrolApiserverV1beta3FlowSchemaStatusRequest {
	r.pretty = &pretty
	return r
}

func (r ApiReadFlowcontrolApiserverV1beta3FlowSchemaStatusRequest) Execute() (*IoK8sApiFlowcontrolV1beta3FlowSchema, *http.Response, error) {
	return r.ApiService.ReadFlowcontrolApiserverV1beta3FlowSchemaStatusExecute(r)
}

/*
ReadFlowcontrolApiserverV1beta3FlowSchemaStatus Method for ReadFlowcontrolApiserverV1beta3FlowSchemaStatus

read status of the specified FlowSchema

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the FlowSchema
 @return ApiReadFlowcontrolApiserverV1beta3FlowSchemaStatusRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) ReadFlowcontrolApiserverV1beta3FlowSchemaStatus(ctx context.Context, name string) ApiReadFlowcontrolApiserverV1beta3FlowSchemaStatusRequest {
	return ApiReadFlowcontrolApiserverV1beta3FlowSchemaStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApiFlowcontrolV1beta3FlowSchema
func (a *FlowcontrolApiserverV1beta3ApiService) ReadFlowcontrolApiserverV1beta3FlowSchemaStatusExecute(r ApiReadFlowcontrolApiserverV1beta3FlowSchemaStatusRequest) (*IoK8sApiFlowcontrolV1beta3FlowSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiFlowcontrolV1beta3FlowSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.ReadFlowcontrolApiserverV1beta3FlowSchemaStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	name string
	pretty *string
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Pretty(pretty string) ApiReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.pretty = &pretty
	return r
}

func (r ApiReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Execute() (*IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration, *http.Response, error) {
	return r.ApiService.ReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationExecute(r)
}

/*
ReadFlowcontrolApiserverV1beta3PriorityLevelConfiguration Method for ReadFlowcontrolApiserverV1beta3PriorityLevelConfiguration

read the specified PriorityLevelConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the PriorityLevelConfiguration
 @return ApiReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) ReadFlowcontrolApiserverV1beta3PriorityLevelConfiguration(ctx context.Context, name string) ApiReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	return ApiReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration
func (a *FlowcontrolApiserverV1beta3ApiService) ReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationExecute(r ApiReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) (*IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.ReadFlowcontrolApiserverV1beta3PriorityLevelConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	name string
	pretty *string
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest) Pretty(pretty string) ApiReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest {
	r.pretty = &pretty
	return r
}

func (r ApiReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest) Execute() (*IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration, *http.Response, error) {
	return r.ApiService.ReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusExecute(r)
}

/*
ReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus Method for ReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus

read status of the specified PriorityLevelConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the PriorityLevelConfiguration
 @return ApiReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) ReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus(ctx context.Context, name string) ApiReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest {
	return ApiReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration
func (a *FlowcontrolApiserverV1beta3ApiService) ReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusExecute(r ApiReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest) (*IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.ReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	name string
	body *IoK8sApiFlowcontrolV1beta3FlowSchema
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

func (r ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaRequest) Body(body IoK8sApiFlowcontrolV1beta3FlowSchema) ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaRequest) Pretty(pretty string) ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaRequest) DryRun(dryRun string) ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaRequest) FieldManager(fieldManager string) ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaRequest) FieldValidation(fieldValidation string) ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaRequest) Execute() (*IoK8sApiFlowcontrolV1beta3FlowSchema, *http.Response, error) {
	return r.ApiService.ReplaceFlowcontrolApiserverV1beta3FlowSchemaExecute(r)
}

/*
ReplaceFlowcontrolApiserverV1beta3FlowSchema Method for ReplaceFlowcontrolApiserverV1beta3FlowSchema

replace the specified FlowSchema

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the FlowSchema
 @return ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) ReplaceFlowcontrolApiserverV1beta3FlowSchema(ctx context.Context, name string) ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaRequest {
	return ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApiFlowcontrolV1beta3FlowSchema
func (a *FlowcontrolApiserverV1beta3ApiService) ReplaceFlowcontrolApiserverV1beta3FlowSchemaExecute(r ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaRequest) (*IoK8sApiFlowcontrolV1beta3FlowSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiFlowcontrolV1beta3FlowSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.ReplaceFlowcontrolApiserverV1beta3FlowSchema")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaStatusRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	name string
	body *IoK8sApiFlowcontrolV1beta3FlowSchema
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

func (r ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaStatusRequest) Body(body IoK8sApiFlowcontrolV1beta3FlowSchema) ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaStatusRequest) Pretty(pretty string) ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaStatusRequest) DryRun(dryRun string) ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaStatusRequest) FieldManager(fieldManager string) ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaStatusRequest) FieldValidation(fieldValidation string) ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaStatusRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaStatusRequest) Execute() (*IoK8sApiFlowcontrolV1beta3FlowSchema, *http.Response, error) {
	return r.ApiService.ReplaceFlowcontrolApiserverV1beta3FlowSchemaStatusExecute(r)
}

/*
ReplaceFlowcontrolApiserverV1beta3FlowSchemaStatus Method for ReplaceFlowcontrolApiserverV1beta3FlowSchemaStatus

replace status of the specified FlowSchema

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the FlowSchema
 @return ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaStatusRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) ReplaceFlowcontrolApiserverV1beta3FlowSchemaStatus(ctx context.Context, name string) ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaStatusRequest {
	return ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApiFlowcontrolV1beta3FlowSchema
func (a *FlowcontrolApiserverV1beta3ApiService) ReplaceFlowcontrolApiserverV1beta3FlowSchemaStatusExecute(r ApiReplaceFlowcontrolApiserverV1beta3FlowSchemaStatusRequest) (*IoK8sApiFlowcontrolV1beta3FlowSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiFlowcontrolV1beta3FlowSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.ReplaceFlowcontrolApiserverV1beta3FlowSchemaStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	name string
	body *IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

func (r ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Body(body IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration) ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Pretty(pretty string) ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) DryRun(dryRun string) ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) FieldManager(fieldManager string) ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) FieldValidation(fieldValidation string) ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Execute() (*IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration, *http.Response, error) {
	return r.ApiService.ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationExecute(r)
}

/*
ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfiguration Method for ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfiguration

replace the specified PriorityLevelConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the PriorityLevelConfiguration
 @return ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfiguration(ctx context.Context, name string) ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	return ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration
func (a *FlowcontrolApiserverV1beta3ApiService) ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationExecute(r ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) (*IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	name string
	body *IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

func (r ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest) Body(body IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration) ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest) Pretty(pretty string) ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest) DryRun(dryRun string) ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest) FieldManager(fieldManager string) ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest) FieldValidation(fieldValidation string) ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest) Execute() (*IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration, *http.Response, error) {
	return r.ApiService.ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusExecute(r)
}

/*
ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus Method for ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus

replace status of the specified PriorityLevelConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the PriorityLevelConfiguration
 @return ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus(ctx context.Context, name string) ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest {
	return ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration
func (a *FlowcontrolApiserverV1beta3ApiService) ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusExecute(r ApiReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatusRequest) (*IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiFlowcontrolV1beta3PriorityLevelConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	name string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest) Continue_(continue_ string) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest) FieldSelector(fieldSelector string) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest) LabelSelector(labelSelector string) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest) Limit(limit int32) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest) Pretty(pretty string) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest) ResourceVersion(resourceVersion string) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest) SendInitialEvents(sendInitialEvents bool) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest) Watch(watch bool) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchFlowcontrolApiserverV1beta3FlowSchemaExecute(r)
}

/*
WatchFlowcontrolApiserverV1beta3FlowSchema Method for WatchFlowcontrolApiserverV1beta3FlowSchema

watch changes to an object of kind FlowSchema. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the FlowSchema
 @return ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) WatchFlowcontrolApiserverV1beta3FlowSchema(ctx context.Context, name string) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest {
	return ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1WatchEvent
func (a *FlowcontrolApiserverV1beta3ApiService) WatchFlowcontrolApiserverV1beta3FlowSchemaExecute(r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaRequest) (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.WatchFlowcontrolApiserverV1beta3FlowSchema")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/watch/flowschemas/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest) Continue_(continue_ string) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest) FieldSelector(fieldSelector string) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest) LabelSelector(labelSelector string) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest) Limit(limit int32) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest) Pretty(pretty string) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest) ResourceVersion(resourceVersion string) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest) SendInitialEvents(sendInitialEvents bool) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest) Watch(watch bool) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchFlowcontrolApiserverV1beta3FlowSchemaListExecute(r)
}

/*
WatchFlowcontrolApiserverV1beta3FlowSchemaList Method for WatchFlowcontrolApiserverV1beta3FlowSchemaList

watch individual changes to a list of FlowSchema. deprecated: use the 'watch' parameter with a list operation instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) WatchFlowcontrolApiserverV1beta3FlowSchemaList(ctx context.Context) ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest {
	return ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1WatchEvent
func (a *FlowcontrolApiserverV1beta3ApiService) WatchFlowcontrolApiserverV1beta3FlowSchemaListExecute(r ApiWatchFlowcontrolApiserverV1beta3FlowSchemaListRequest) (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.WatchFlowcontrolApiserverV1beta3FlowSchemaList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/watch/flowschemas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	name string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Continue_(continue_ string) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) FieldSelector(fieldSelector string) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) LabelSelector(labelSelector string) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Limit(limit int32) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Pretty(pretty string) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) ResourceVersion(resourceVersion string) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) SendInitialEvents(sendInitialEvents bool) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Watch(watch bool) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationExecute(r)
}

/*
WatchFlowcontrolApiserverV1beta3PriorityLevelConfiguration Method for WatchFlowcontrolApiserverV1beta3PriorityLevelConfiguration

watch changes to an object of kind PriorityLevelConfiguration. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the PriorityLevelConfiguration
 @return ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) WatchFlowcontrolApiserverV1beta3PriorityLevelConfiguration(ctx context.Context, name string) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest {
	return ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1WatchEvent
func (a *FlowcontrolApiserverV1beta3ApiService) WatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationExecute(r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationRequest) (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.WatchFlowcontrolApiserverV1beta3PriorityLevelConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/watch/prioritylevelconfigurations/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest struct {
	ctx context.Context
	ApiService *FlowcontrolApiserverV1beta3ApiService
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest) Continue_(continue_ string) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest) FieldSelector(fieldSelector string) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest) LabelSelector(labelSelector string) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest) Limit(limit int32) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest) Pretty(pretty string) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest) ResourceVersion(resourceVersion string) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest) SendInitialEvents(sendInitialEvents bool) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest) Watch(watch bool) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListExecute(r)
}

/*
WatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationList Method for WatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationList

watch individual changes to a list of PriorityLevelConfiguration. deprecated: use the 'watch' parameter with a list operation instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest
*/
func (a *FlowcontrolApiserverV1beta3ApiService) WatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationList(ctx context.Context) ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest {
	return ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1WatchEvent
func (a *FlowcontrolApiserverV1beta3ApiService) WatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListExecute(r ApiWatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationListRequest) (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowcontrolApiserverV1beta3ApiService.WatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/flowcontrol.apiserver.k8s.io/v1beta3/watch/prioritylevelconfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
