/*
Kubernetes

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.27.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RbacAuthorizationV1ApiService RbacAuthorizationV1Api service
type RbacAuthorizationV1ApiService service

type ApiCreateRbacAuthorizationV1ClusterRoleRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	body *IoK8sApiRbacV1ClusterRole
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

func (r ApiCreateRbacAuthorizationV1ClusterRoleRequest) Body(body IoK8sApiRbacV1ClusterRole) ApiCreateRbacAuthorizationV1ClusterRoleRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiCreateRbacAuthorizationV1ClusterRoleRequest) Pretty(pretty string) ApiCreateRbacAuthorizationV1ClusterRoleRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiCreateRbacAuthorizationV1ClusterRoleRequest) DryRun(dryRun string) ApiCreateRbacAuthorizationV1ClusterRoleRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiCreateRbacAuthorizationV1ClusterRoleRequest) FieldManager(fieldManager string) ApiCreateRbacAuthorizationV1ClusterRoleRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiCreateRbacAuthorizationV1ClusterRoleRequest) FieldValidation(fieldValidation string) ApiCreateRbacAuthorizationV1ClusterRoleRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiCreateRbacAuthorizationV1ClusterRoleRequest) Execute() (*IoK8sApiRbacV1ClusterRole, *http.Response, error) {
	return r.ApiService.CreateRbacAuthorizationV1ClusterRoleExecute(r)
}

/*
CreateRbacAuthorizationV1ClusterRole Method for CreateRbacAuthorizationV1ClusterRole

create a ClusterRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateRbacAuthorizationV1ClusterRoleRequest
*/
func (a *RbacAuthorizationV1ApiService) CreateRbacAuthorizationV1ClusterRole(ctx context.Context) ApiCreateRbacAuthorizationV1ClusterRoleRequest {
	return ApiCreateRbacAuthorizationV1ClusterRoleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1ClusterRole
func (a *RbacAuthorizationV1ApiService) CreateRbacAuthorizationV1ClusterRoleExecute(r ApiCreateRbacAuthorizationV1ClusterRoleRequest) (*IoK8sApiRbacV1ClusterRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1ClusterRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.CreateRbacAuthorizationV1ClusterRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/clusterroles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateRbacAuthorizationV1ClusterRoleBindingRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	body *IoK8sApiRbacV1ClusterRoleBinding
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

func (r ApiCreateRbacAuthorizationV1ClusterRoleBindingRequest) Body(body IoK8sApiRbacV1ClusterRoleBinding) ApiCreateRbacAuthorizationV1ClusterRoleBindingRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiCreateRbacAuthorizationV1ClusterRoleBindingRequest) Pretty(pretty string) ApiCreateRbacAuthorizationV1ClusterRoleBindingRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiCreateRbacAuthorizationV1ClusterRoleBindingRequest) DryRun(dryRun string) ApiCreateRbacAuthorizationV1ClusterRoleBindingRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiCreateRbacAuthorizationV1ClusterRoleBindingRequest) FieldManager(fieldManager string) ApiCreateRbacAuthorizationV1ClusterRoleBindingRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiCreateRbacAuthorizationV1ClusterRoleBindingRequest) FieldValidation(fieldValidation string) ApiCreateRbacAuthorizationV1ClusterRoleBindingRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiCreateRbacAuthorizationV1ClusterRoleBindingRequest) Execute() (*IoK8sApiRbacV1ClusterRoleBinding, *http.Response, error) {
	return r.ApiService.CreateRbacAuthorizationV1ClusterRoleBindingExecute(r)
}

/*
CreateRbacAuthorizationV1ClusterRoleBinding Method for CreateRbacAuthorizationV1ClusterRoleBinding

create a ClusterRoleBinding

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateRbacAuthorizationV1ClusterRoleBindingRequest
*/
func (a *RbacAuthorizationV1ApiService) CreateRbacAuthorizationV1ClusterRoleBinding(ctx context.Context) ApiCreateRbacAuthorizationV1ClusterRoleBindingRequest {
	return ApiCreateRbacAuthorizationV1ClusterRoleBindingRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1ClusterRoleBinding
func (a *RbacAuthorizationV1ApiService) CreateRbacAuthorizationV1ClusterRoleBindingExecute(r ApiCreateRbacAuthorizationV1ClusterRoleBindingRequest) (*IoK8sApiRbacV1ClusterRoleBinding, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1ClusterRoleBinding
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.CreateRbacAuthorizationV1ClusterRoleBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateRbacAuthorizationV1NamespacedRoleRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	namespace string
	body *IoK8sApiRbacV1Role
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

func (r ApiCreateRbacAuthorizationV1NamespacedRoleRequest) Body(body IoK8sApiRbacV1Role) ApiCreateRbacAuthorizationV1NamespacedRoleRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiCreateRbacAuthorizationV1NamespacedRoleRequest) Pretty(pretty string) ApiCreateRbacAuthorizationV1NamespacedRoleRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiCreateRbacAuthorizationV1NamespacedRoleRequest) DryRun(dryRun string) ApiCreateRbacAuthorizationV1NamespacedRoleRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiCreateRbacAuthorizationV1NamespacedRoleRequest) FieldManager(fieldManager string) ApiCreateRbacAuthorizationV1NamespacedRoleRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiCreateRbacAuthorizationV1NamespacedRoleRequest) FieldValidation(fieldValidation string) ApiCreateRbacAuthorizationV1NamespacedRoleRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiCreateRbacAuthorizationV1NamespacedRoleRequest) Execute() (*IoK8sApiRbacV1Role, *http.Response, error) {
	return r.ApiService.CreateRbacAuthorizationV1NamespacedRoleExecute(r)
}

/*
CreateRbacAuthorizationV1NamespacedRole Method for CreateRbacAuthorizationV1NamespacedRole

create a Role

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiCreateRbacAuthorizationV1NamespacedRoleRequest
*/
func (a *RbacAuthorizationV1ApiService) CreateRbacAuthorizationV1NamespacedRole(ctx context.Context, namespace string) ApiCreateRbacAuthorizationV1NamespacedRoleRequest {
	return ApiCreateRbacAuthorizationV1NamespacedRoleRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1Role
func (a *RbacAuthorizationV1ApiService) CreateRbacAuthorizationV1NamespacedRoleExecute(r ApiCreateRbacAuthorizationV1NamespacedRoleRequest) (*IoK8sApiRbacV1Role, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1Role
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.CreateRbacAuthorizationV1NamespacedRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateRbacAuthorizationV1NamespacedRoleBindingRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	namespace string
	body *IoK8sApiRbacV1RoleBinding
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

func (r ApiCreateRbacAuthorizationV1NamespacedRoleBindingRequest) Body(body IoK8sApiRbacV1RoleBinding) ApiCreateRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiCreateRbacAuthorizationV1NamespacedRoleBindingRequest) Pretty(pretty string) ApiCreateRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiCreateRbacAuthorizationV1NamespacedRoleBindingRequest) DryRun(dryRun string) ApiCreateRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiCreateRbacAuthorizationV1NamespacedRoleBindingRequest) FieldManager(fieldManager string) ApiCreateRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiCreateRbacAuthorizationV1NamespacedRoleBindingRequest) FieldValidation(fieldValidation string) ApiCreateRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiCreateRbacAuthorizationV1NamespacedRoleBindingRequest) Execute() (*IoK8sApiRbacV1RoleBinding, *http.Response, error) {
	return r.ApiService.CreateRbacAuthorizationV1NamespacedRoleBindingExecute(r)
}

/*
CreateRbacAuthorizationV1NamespacedRoleBinding Method for CreateRbacAuthorizationV1NamespacedRoleBinding

create a RoleBinding

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiCreateRbacAuthorizationV1NamespacedRoleBindingRequest
*/
func (a *RbacAuthorizationV1ApiService) CreateRbacAuthorizationV1NamespacedRoleBinding(ctx context.Context, namespace string) ApiCreateRbacAuthorizationV1NamespacedRoleBindingRequest {
	return ApiCreateRbacAuthorizationV1NamespacedRoleBindingRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1RoleBinding
func (a *RbacAuthorizationV1ApiService) CreateRbacAuthorizationV1NamespacedRoleBindingExecute(r ApiCreateRbacAuthorizationV1NamespacedRoleBindingRequest) (*IoK8sApiRbacV1RoleBinding, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1RoleBinding
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.CreateRbacAuthorizationV1NamespacedRoleBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRbacAuthorizationV1ClusterRoleRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	name string
	pretty *string
	dryRun *string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	body *IoK8sApimachineryPkgApisMetaV1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteRbacAuthorizationV1ClusterRoleRequest) Pretty(pretty string) ApiDeleteRbacAuthorizationV1ClusterRoleRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteRbacAuthorizationV1ClusterRoleRequest) DryRun(dryRun string) ApiDeleteRbacAuthorizationV1ClusterRoleRequest {
	r.dryRun = &dryRun
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteRbacAuthorizationV1ClusterRoleRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteRbacAuthorizationV1ClusterRoleRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteRbacAuthorizationV1ClusterRoleRequest) OrphanDependents(orphanDependents bool) ApiDeleteRbacAuthorizationV1ClusterRoleRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteRbacAuthorizationV1ClusterRoleRequest) PropagationPolicy(propagationPolicy string) ApiDeleteRbacAuthorizationV1ClusterRoleRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteRbacAuthorizationV1ClusterRoleRequest) Body(body IoK8sApimachineryPkgApisMetaV1DeleteOptions) ApiDeleteRbacAuthorizationV1ClusterRoleRequest {
	r.body = &body
	return r
}

func (r ApiDeleteRbacAuthorizationV1ClusterRoleRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	return r.ApiService.DeleteRbacAuthorizationV1ClusterRoleExecute(r)
}

/*
DeleteRbacAuthorizationV1ClusterRole Method for DeleteRbacAuthorizationV1ClusterRole

delete a ClusterRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ClusterRole
 @return ApiDeleteRbacAuthorizationV1ClusterRoleRequest
*/
func (a *RbacAuthorizationV1ApiService) DeleteRbacAuthorizationV1ClusterRole(ctx context.Context, name string) ApiDeleteRbacAuthorizationV1ClusterRoleRequest {
	return ApiDeleteRbacAuthorizationV1ClusterRoleRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1Status
func (a *RbacAuthorizationV1ApiService) DeleteRbacAuthorizationV1ClusterRoleExecute(r ApiDeleteRbacAuthorizationV1ClusterRoleRequest) (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.DeleteRbacAuthorizationV1ClusterRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.gracePeriodSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gracePeriodSeconds", r.gracePeriodSeconds, "")
	}
	if r.orphanDependents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphanDependents", r.orphanDependents, "")
	}
	if r.propagationPolicy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "propagationPolicy", r.propagationPolicy, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRbacAuthorizationV1ClusterRoleBindingRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	name string
	pretty *string
	dryRun *string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	body *IoK8sApimachineryPkgApisMetaV1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteRbacAuthorizationV1ClusterRoleBindingRequest) Pretty(pretty string) ApiDeleteRbacAuthorizationV1ClusterRoleBindingRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteRbacAuthorizationV1ClusterRoleBindingRequest) DryRun(dryRun string) ApiDeleteRbacAuthorizationV1ClusterRoleBindingRequest {
	r.dryRun = &dryRun
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteRbacAuthorizationV1ClusterRoleBindingRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteRbacAuthorizationV1ClusterRoleBindingRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteRbacAuthorizationV1ClusterRoleBindingRequest) OrphanDependents(orphanDependents bool) ApiDeleteRbacAuthorizationV1ClusterRoleBindingRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteRbacAuthorizationV1ClusterRoleBindingRequest) PropagationPolicy(propagationPolicy string) ApiDeleteRbacAuthorizationV1ClusterRoleBindingRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteRbacAuthorizationV1ClusterRoleBindingRequest) Body(body IoK8sApimachineryPkgApisMetaV1DeleteOptions) ApiDeleteRbacAuthorizationV1ClusterRoleBindingRequest {
	r.body = &body
	return r
}

func (r ApiDeleteRbacAuthorizationV1ClusterRoleBindingRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	return r.ApiService.DeleteRbacAuthorizationV1ClusterRoleBindingExecute(r)
}

/*
DeleteRbacAuthorizationV1ClusterRoleBinding Method for DeleteRbacAuthorizationV1ClusterRoleBinding

delete a ClusterRoleBinding

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ClusterRoleBinding
 @return ApiDeleteRbacAuthorizationV1ClusterRoleBindingRequest
*/
func (a *RbacAuthorizationV1ApiService) DeleteRbacAuthorizationV1ClusterRoleBinding(ctx context.Context, name string) ApiDeleteRbacAuthorizationV1ClusterRoleBindingRequest {
	return ApiDeleteRbacAuthorizationV1ClusterRoleBindingRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1Status
func (a *RbacAuthorizationV1ApiService) DeleteRbacAuthorizationV1ClusterRoleBindingExecute(r ApiDeleteRbacAuthorizationV1ClusterRoleBindingRequest) (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.DeleteRbacAuthorizationV1ClusterRoleBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.gracePeriodSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gracePeriodSeconds", r.gracePeriodSeconds, "")
	}
	if r.orphanDependents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphanDependents", r.orphanDependents, "")
	}
	if r.propagationPolicy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "propagationPolicy", r.propagationPolicy, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	pretty *string
	continue_ *string
	dryRun *string
	fieldSelector *string
	gracePeriodSeconds *int32
	labelSelector *string
	limit *int32
	orphanDependents *bool
	propagationPolicy *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	body *IoK8sApimachineryPkgApisMetaV1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest) Pretty(pretty string) ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest {
	r.pretty = &pretty
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest) Continue_(continue_ string) ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest {
	r.continue_ = &continue_
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest) DryRun(dryRun string) ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest {
	r.dryRun = &dryRun
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest) FieldSelector(fieldSelector string) ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest) LabelSelector(labelSelector string) ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest) Limit(limit int32) ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest {
	r.limit = &limit
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest) OrphanDependents(orphanDependents bool) ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest) PropagationPolicy(propagationPolicy string) ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest) ResourceVersion(resourceVersion string) ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest) ResourceVersionMatch(resourceVersionMatch string) ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest) SendInitialEvents(sendInitialEvents bool) ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest) TimeoutSeconds(timeoutSeconds int32) ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest) Body(body IoK8sApimachineryPkgApisMetaV1DeleteOptions) ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest {
	r.body = &body
	return r
}

func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	return r.ApiService.DeleteRbacAuthorizationV1CollectionClusterRoleExecute(r)
}

/*
DeleteRbacAuthorizationV1CollectionClusterRole Method for DeleteRbacAuthorizationV1CollectionClusterRole

delete collection of ClusterRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest
*/
func (a *RbacAuthorizationV1ApiService) DeleteRbacAuthorizationV1CollectionClusterRole(ctx context.Context) ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest {
	return ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1Status
func (a *RbacAuthorizationV1ApiService) DeleteRbacAuthorizationV1CollectionClusterRoleExecute(r ApiDeleteRbacAuthorizationV1CollectionClusterRoleRequest) (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.DeleteRbacAuthorizationV1CollectionClusterRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/clusterroles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.gracePeriodSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gracePeriodSeconds", r.gracePeriodSeconds, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orphanDependents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphanDependents", r.orphanDependents, "")
	}
	if r.propagationPolicy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "propagationPolicy", r.propagationPolicy, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	pretty *string
	continue_ *string
	dryRun *string
	fieldSelector *string
	gracePeriodSeconds *int32
	labelSelector *string
	limit *int32
	orphanDependents *bool
	propagationPolicy *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	body *IoK8sApimachineryPkgApisMetaV1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest) Pretty(pretty string) ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest {
	r.pretty = &pretty
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest) Continue_(continue_ string) ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest {
	r.continue_ = &continue_
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest) DryRun(dryRun string) ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest {
	r.dryRun = &dryRun
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest) FieldSelector(fieldSelector string) ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest) LabelSelector(labelSelector string) ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest) Limit(limit int32) ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest {
	r.limit = &limit
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest) OrphanDependents(orphanDependents bool) ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest) PropagationPolicy(propagationPolicy string) ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest) ResourceVersion(resourceVersion string) ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest) ResourceVersionMatch(resourceVersionMatch string) ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest) SendInitialEvents(sendInitialEvents bool) ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest) TimeoutSeconds(timeoutSeconds int32) ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest) Body(body IoK8sApimachineryPkgApisMetaV1DeleteOptions) ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest {
	r.body = &body
	return r
}

func (r ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	return r.ApiService.DeleteRbacAuthorizationV1CollectionClusterRoleBindingExecute(r)
}

/*
DeleteRbacAuthorizationV1CollectionClusterRoleBinding Method for DeleteRbacAuthorizationV1CollectionClusterRoleBinding

delete collection of ClusterRoleBinding

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest
*/
func (a *RbacAuthorizationV1ApiService) DeleteRbacAuthorizationV1CollectionClusterRoleBinding(ctx context.Context) ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest {
	return ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1Status
func (a *RbacAuthorizationV1ApiService) DeleteRbacAuthorizationV1CollectionClusterRoleBindingExecute(r ApiDeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest) (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.DeleteRbacAuthorizationV1CollectionClusterRoleBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.gracePeriodSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gracePeriodSeconds", r.gracePeriodSeconds, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orphanDependents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphanDependents", r.orphanDependents, "")
	}
	if r.propagationPolicy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "propagationPolicy", r.propagationPolicy, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	namespace string
	pretty *string
	continue_ *string
	dryRun *string
	fieldSelector *string
	gracePeriodSeconds *int32
	labelSelector *string
	limit *int32
	orphanDependents *bool
	propagationPolicy *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	body *IoK8sApimachineryPkgApisMetaV1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest) Pretty(pretty string) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest {
	r.pretty = &pretty
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest) Continue_(continue_ string) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest {
	r.continue_ = &continue_
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest) DryRun(dryRun string) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest {
	r.dryRun = &dryRun
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest) FieldSelector(fieldSelector string) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest) LabelSelector(labelSelector string) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest) Limit(limit int32) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest {
	r.limit = &limit
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest) OrphanDependents(orphanDependents bool) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest) PropagationPolicy(propagationPolicy string) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest) ResourceVersion(resourceVersion string) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest) ResourceVersionMatch(resourceVersionMatch string) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest) SendInitialEvents(sendInitialEvents bool) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest) TimeoutSeconds(timeoutSeconds int32) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest) Body(body IoK8sApimachineryPkgApisMetaV1DeleteOptions) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest {
	r.body = &body
	return r
}

func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	return r.ApiService.DeleteRbacAuthorizationV1CollectionNamespacedRoleExecute(r)
}

/*
DeleteRbacAuthorizationV1CollectionNamespacedRole Method for DeleteRbacAuthorizationV1CollectionNamespacedRole

delete collection of Role

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest
*/
func (a *RbacAuthorizationV1ApiService) DeleteRbacAuthorizationV1CollectionNamespacedRole(ctx context.Context, namespace string) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest {
	return ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1Status
func (a *RbacAuthorizationV1ApiService) DeleteRbacAuthorizationV1CollectionNamespacedRoleExecute(r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleRequest) (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.DeleteRbacAuthorizationV1CollectionNamespacedRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.gracePeriodSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gracePeriodSeconds", r.gracePeriodSeconds, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orphanDependents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphanDependents", r.orphanDependents, "")
	}
	if r.propagationPolicy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "propagationPolicy", r.propagationPolicy, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	namespace string
	pretty *string
	continue_ *string
	dryRun *string
	fieldSelector *string
	gracePeriodSeconds *int32
	labelSelector *string
	limit *int32
	orphanDependents *bool
	propagationPolicy *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	body *IoK8sApimachineryPkgApisMetaV1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest) Pretty(pretty string) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest {
	r.pretty = &pretty
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest) Continue_(continue_ string) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest {
	r.continue_ = &continue_
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest) DryRun(dryRun string) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest {
	r.dryRun = &dryRun
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest) FieldSelector(fieldSelector string) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest) LabelSelector(labelSelector string) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest) Limit(limit int32) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest {
	r.limit = &limit
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest) OrphanDependents(orphanDependents bool) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest) PropagationPolicy(propagationPolicy string) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest) ResourceVersion(resourceVersion string) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest) ResourceVersionMatch(resourceVersionMatch string) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest) SendInitialEvents(sendInitialEvents bool) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest) TimeoutSeconds(timeoutSeconds int32) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest) Body(body IoK8sApimachineryPkgApisMetaV1DeleteOptions) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest {
	r.body = &body
	return r
}

func (r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	return r.ApiService.DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingExecute(r)
}

/*
DeleteRbacAuthorizationV1CollectionNamespacedRoleBinding Method for DeleteRbacAuthorizationV1CollectionNamespacedRoleBinding

delete collection of RoleBinding

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest
*/
func (a *RbacAuthorizationV1ApiService) DeleteRbacAuthorizationV1CollectionNamespacedRoleBinding(ctx context.Context, namespace string) ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest {
	return ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1Status
func (a *RbacAuthorizationV1ApiService) DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingExecute(r ApiDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest) (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.DeleteRbacAuthorizationV1CollectionNamespacedRoleBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.gracePeriodSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gracePeriodSeconds", r.gracePeriodSeconds, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orphanDependents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphanDependents", r.orphanDependents, "")
	}
	if r.propagationPolicy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "propagationPolicy", r.propagationPolicy, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRbacAuthorizationV1NamespacedRoleRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	name string
	namespace string
	pretty *string
	dryRun *string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	body *IoK8sApimachineryPkgApisMetaV1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteRbacAuthorizationV1NamespacedRoleRequest) Pretty(pretty string) ApiDeleteRbacAuthorizationV1NamespacedRoleRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteRbacAuthorizationV1NamespacedRoleRequest) DryRun(dryRun string) ApiDeleteRbacAuthorizationV1NamespacedRoleRequest {
	r.dryRun = &dryRun
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteRbacAuthorizationV1NamespacedRoleRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteRbacAuthorizationV1NamespacedRoleRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteRbacAuthorizationV1NamespacedRoleRequest) OrphanDependents(orphanDependents bool) ApiDeleteRbacAuthorizationV1NamespacedRoleRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteRbacAuthorizationV1NamespacedRoleRequest) PropagationPolicy(propagationPolicy string) ApiDeleteRbacAuthorizationV1NamespacedRoleRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteRbacAuthorizationV1NamespacedRoleRequest) Body(body IoK8sApimachineryPkgApisMetaV1DeleteOptions) ApiDeleteRbacAuthorizationV1NamespacedRoleRequest {
	r.body = &body
	return r
}

func (r ApiDeleteRbacAuthorizationV1NamespacedRoleRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	return r.ApiService.DeleteRbacAuthorizationV1NamespacedRoleExecute(r)
}

/*
DeleteRbacAuthorizationV1NamespacedRole Method for DeleteRbacAuthorizationV1NamespacedRole

delete a Role

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the Role
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiDeleteRbacAuthorizationV1NamespacedRoleRequest
*/
func (a *RbacAuthorizationV1ApiService) DeleteRbacAuthorizationV1NamespacedRole(ctx context.Context, name string, namespace string) ApiDeleteRbacAuthorizationV1NamespacedRoleRequest {
	return ApiDeleteRbacAuthorizationV1NamespacedRoleRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1Status
func (a *RbacAuthorizationV1ApiService) DeleteRbacAuthorizationV1NamespacedRoleExecute(r ApiDeleteRbacAuthorizationV1NamespacedRoleRequest) (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.DeleteRbacAuthorizationV1NamespacedRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.gracePeriodSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gracePeriodSeconds", r.gracePeriodSeconds, "")
	}
	if r.orphanDependents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphanDependents", r.orphanDependents, "")
	}
	if r.propagationPolicy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "propagationPolicy", r.propagationPolicy, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRbacAuthorizationV1NamespacedRoleBindingRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	name string
	namespace string
	pretty *string
	dryRun *string
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
	body *IoK8sApimachineryPkgApisMetaV1DeleteOptions
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiDeleteRbacAuthorizationV1NamespacedRoleBindingRequest) Pretty(pretty string) ApiDeleteRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiDeleteRbacAuthorizationV1NamespacedRoleBindingRequest) DryRun(dryRun string) ApiDeleteRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.dryRun = &dryRun
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteRbacAuthorizationV1NamespacedRoleBindingRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteRbacAuthorizationV1NamespacedRoleBindingRequest) OrphanDependents(orphanDependents bool) ApiDeleteRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteRbacAuthorizationV1NamespacedRoleBindingRequest) PropagationPolicy(propagationPolicy string) ApiDeleteRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteRbacAuthorizationV1NamespacedRoleBindingRequest) Body(body IoK8sApimachineryPkgApisMetaV1DeleteOptions) ApiDeleteRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.body = &body
	return r
}

func (r ApiDeleteRbacAuthorizationV1NamespacedRoleBindingRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	return r.ApiService.DeleteRbacAuthorizationV1NamespacedRoleBindingExecute(r)
}

/*
DeleteRbacAuthorizationV1NamespacedRoleBinding Method for DeleteRbacAuthorizationV1NamespacedRoleBinding

delete a RoleBinding

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the RoleBinding
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiDeleteRbacAuthorizationV1NamespacedRoleBindingRequest
*/
func (a *RbacAuthorizationV1ApiService) DeleteRbacAuthorizationV1NamespacedRoleBinding(ctx context.Context, name string, namespace string) ApiDeleteRbacAuthorizationV1NamespacedRoleBindingRequest {
	return ApiDeleteRbacAuthorizationV1NamespacedRoleBindingRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1Status
func (a *RbacAuthorizationV1ApiService) DeleteRbacAuthorizationV1NamespacedRoleBindingExecute(r ApiDeleteRbacAuthorizationV1NamespacedRoleBindingRequest) (*IoK8sApimachineryPkgApisMetaV1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.DeleteRbacAuthorizationV1NamespacedRoleBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.gracePeriodSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gracePeriodSeconds", r.gracePeriodSeconds, "")
	}
	if r.orphanDependents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphanDependents", r.orphanDependents, "")
	}
	if r.propagationPolicy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "propagationPolicy", r.propagationPolicy, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRbacAuthorizationV1APIResourcesRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
}

func (r ApiGetRbacAuthorizationV1APIResourcesRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1APIResourceList, *http.Response, error) {
	return r.ApiService.GetRbacAuthorizationV1APIResourcesExecute(r)
}

/*
GetRbacAuthorizationV1APIResources Method for GetRbacAuthorizationV1APIResources

get available resources

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetRbacAuthorizationV1APIResourcesRequest
*/
func (a *RbacAuthorizationV1ApiService) GetRbacAuthorizationV1APIResources(ctx context.Context) ApiGetRbacAuthorizationV1APIResourcesRequest {
	return ApiGetRbacAuthorizationV1APIResourcesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1APIResourceList
func (a *RbacAuthorizationV1ApiService) GetRbacAuthorizationV1APIResourcesExecute(r ApiGetRbacAuthorizationV1APIResourcesRequest) (*IoK8sApimachineryPkgApisMetaV1APIResourceList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1APIResourceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.GetRbacAuthorizationV1APIResources")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListRbacAuthorizationV1ClusterRoleRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	pretty *string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListRbacAuthorizationV1ClusterRoleRequest) Pretty(pretty string) ApiListRbacAuthorizationV1ClusterRoleRequest {
	r.pretty = &pretty
	return r
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiListRbacAuthorizationV1ClusterRoleRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListRbacAuthorizationV1ClusterRoleRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListRbacAuthorizationV1ClusterRoleRequest) Continue_(continue_ string) ApiListRbacAuthorizationV1ClusterRoleRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListRbacAuthorizationV1ClusterRoleRequest) FieldSelector(fieldSelector string) ApiListRbacAuthorizationV1ClusterRoleRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListRbacAuthorizationV1ClusterRoleRequest) LabelSelector(labelSelector string) ApiListRbacAuthorizationV1ClusterRoleRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListRbacAuthorizationV1ClusterRoleRequest) Limit(limit int32) ApiListRbacAuthorizationV1ClusterRoleRequest {
	r.limit = &limit
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListRbacAuthorizationV1ClusterRoleRequest) ResourceVersion(resourceVersion string) ApiListRbacAuthorizationV1ClusterRoleRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListRbacAuthorizationV1ClusterRoleRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListRbacAuthorizationV1ClusterRoleRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiListRbacAuthorizationV1ClusterRoleRequest) SendInitialEvents(sendInitialEvents bool) ApiListRbacAuthorizationV1ClusterRoleRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListRbacAuthorizationV1ClusterRoleRequest) TimeoutSeconds(timeoutSeconds int32) ApiListRbacAuthorizationV1ClusterRoleRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListRbacAuthorizationV1ClusterRoleRequest) Watch(watch bool) ApiListRbacAuthorizationV1ClusterRoleRequest {
	r.watch = &watch
	return r
}

func (r ApiListRbacAuthorizationV1ClusterRoleRequest) Execute() (*IoK8sApiRbacV1ClusterRoleList, *http.Response, error) {
	return r.ApiService.ListRbacAuthorizationV1ClusterRoleExecute(r)
}

/*
ListRbacAuthorizationV1ClusterRole Method for ListRbacAuthorizationV1ClusterRole

list or watch objects of kind ClusterRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListRbacAuthorizationV1ClusterRoleRequest
*/
func (a *RbacAuthorizationV1ApiService) ListRbacAuthorizationV1ClusterRole(ctx context.Context) ApiListRbacAuthorizationV1ClusterRoleRequest {
	return ApiListRbacAuthorizationV1ClusterRoleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1ClusterRoleList
func (a *RbacAuthorizationV1ApiService) ListRbacAuthorizationV1ClusterRoleExecute(r ApiListRbacAuthorizationV1ClusterRoleRequest) (*IoK8sApiRbacV1ClusterRoleList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1ClusterRoleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.ListRbacAuthorizationV1ClusterRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/clusterroles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListRbacAuthorizationV1ClusterRoleBindingRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	pretty *string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListRbacAuthorizationV1ClusterRoleBindingRequest) Pretty(pretty string) ApiListRbacAuthorizationV1ClusterRoleBindingRequest {
	r.pretty = &pretty
	return r
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiListRbacAuthorizationV1ClusterRoleBindingRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListRbacAuthorizationV1ClusterRoleBindingRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListRbacAuthorizationV1ClusterRoleBindingRequest) Continue_(continue_ string) ApiListRbacAuthorizationV1ClusterRoleBindingRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListRbacAuthorizationV1ClusterRoleBindingRequest) FieldSelector(fieldSelector string) ApiListRbacAuthorizationV1ClusterRoleBindingRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListRbacAuthorizationV1ClusterRoleBindingRequest) LabelSelector(labelSelector string) ApiListRbacAuthorizationV1ClusterRoleBindingRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListRbacAuthorizationV1ClusterRoleBindingRequest) Limit(limit int32) ApiListRbacAuthorizationV1ClusterRoleBindingRequest {
	r.limit = &limit
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListRbacAuthorizationV1ClusterRoleBindingRequest) ResourceVersion(resourceVersion string) ApiListRbacAuthorizationV1ClusterRoleBindingRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListRbacAuthorizationV1ClusterRoleBindingRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListRbacAuthorizationV1ClusterRoleBindingRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiListRbacAuthorizationV1ClusterRoleBindingRequest) SendInitialEvents(sendInitialEvents bool) ApiListRbacAuthorizationV1ClusterRoleBindingRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListRbacAuthorizationV1ClusterRoleBindingRequest) TimeoutSeconds(timeoutSeconds int32) ApiListRbacAuthorizationV1ClusterRoleBindingRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListRbacAuthorizationV1ClusterRoleBindingRequest) Watch(watch bool) ApiListRbacAuthorizationV1ClusterRoleBindingRequest {
	r.watch = &watch
	return r
}

func (r ApiListRbacAuthorizationV1ClusterRoleBindingRequest) Execute() (*IoK8sApiRbacV1ClusterRoleBindingList, *http.Response, error) {
	return r.ApiService.ListRbacAuthorizationV1ClusterRoleBindingExecute(r)
}

/*
ListRbacAuthorizationV1ClusterRoleBinding Method for ListRbacAuthorizationV1ClusterRoleBinding

list or watch objects of kind ClusterRoleBinding

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListRbacAuthorizationV1ClusterRoleBindingRequest
*/
func (a *RbacAuthorizationV1ApiService) ListRbacAuthorizationV1ClusterRoleBinding(ctx context.Context) ApiListRbacAuthorizationV1ClusterRoleBindingRequest {
	return ApiListRbacAuthorizationV1ClusterRoleBindingRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1ClusterRoleBindingList
func (a *RbacAuthorizationV1ApiService) ListRbacAuthorizationV1ClusterRoleBindingExecute(r ApiListRbacAuthorizationV1ClusterRoleBindingRequest) (*IoK8sApiRbacV1ClusterRoleBindingList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1ClusterRoleBindingList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.ListRbacAuthorizationV1ClusterRoleBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListRbacAuthorizationV1NamespacedRoleRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	namespace string
	pretty *string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListRbacAuthorizationV1NamespacedRoleRequest) Pretty(pretty string) ApiListRbacAuthorizationV1NamespacedRoleRequest {
	r.pretty = &pretty
	return r
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiListRbacAuthorizationV1NamespacedRoleRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListRbacAuthorizationV1NamespacedRoleRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListRbacAuthorizationV1NamespacedRoleRequest) Continue_(continue_ string) ApiListRbacAuthorizationV1NamespacedRoleRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListRbacAuthorizationV1NamespacedRoleRequest) FieldSelector(fieldSelector string) ApiListRbacAuthorizationV1NamespacedRoleRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListRbacAuthorizationV1NamespacedRoleRequest) LabelSelector(labelSelector string) ApiListRbacAuthorizationV1NamespacedRoleRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListRbacAuthorizationV1NamespacedRoleRequest) Limit(limit int32) ApiListRbacAuthorizationV1NamespacedRoleRequest {
	r.limit = &limit
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListRbacAuthorizationV1NamespacedRoleRequest) ResourceVersion(resourceVersion string) ApiListRbacAuthorizationV1NamespacedRoleRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListRbacAuthorizationV1NamespacedRoleRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListRbacAuthorizationV1NamespacedRoleRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiListRbacAuthorizationV1NamespacedRoleRequest) SendInitialEvents(sendInitialEvents bool) ApiListRbacAuthorizationV1NamespacedRoleRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListRbacAuthorizationV1NamespacedRoleRequest) TimeoutSeconds(timeoutSeconds int32) ApiListRbacAuthorizationV1NamespacedRoleRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListRbacAuthorizationV1NamespacedRoleRequest) Watch(watch bool) ApiListRbacAuthorizationV1NamespacedRoleRequest {
	r.watch = &watch
	return r
}

func (r ApiListRbacAuthorizationV1NamespacedRoleRequest) Execute() (*IoK8sApiRbacV1RoleList, *http.Response, error) {
	return r.ApiService.ListRbacAuthorizationV1NamespacedRoleExecute(r)
}

/*
ListRbacAuthorizationV1NamespacedRole Method for ListRbacAuthorizationV1NamespacedRole

list or watch objects of kind Role

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiListRbacAuthorizationV1NamespacedRoleRequest
*/
func (a *RbacAuthorizationV1ApiService) ListRbacAuthorizationV1NamespacedRole(ctx context.Context, namespace string) ApiListRbacAuthorizationV1NamespacedRoleRequest {
	return ApiListRbacAuthorizationV1NamespacedRoleRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1RoleList
func (a *RbacAuthorizationV1ApiService) ListRbacAuthorizationV1NamespacedRoleExecute(r ApiListRbacAuthorizationV1NamespacedRoleRequest) (*IoK8sApiRbacV1RoleList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1RoleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.ListRbacAuthorizationV1NamespacedRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListRbacAuthorizationV1NamespacedRoleBindingRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	namespace string
	pretty *string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListRbacAuthorizationV1NamespacedRoleBindingRequest) Pretty(pretty string) ApiListRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.pretty = &pretty
	return r
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiListRbacAuthorizationV1NamespacedRoleBindingRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListRbacAuthorizationV1NamespacedRoleBindingRequest) Continue_(continue_ string) ApiListRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListRbacAuthorizationV1NamespacedRoleBindingRequest) FieldSelector(fieldSelector string) ApiListRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListRbacAuthorizationV1NamespacedRoleBindingRequest) LabelSelector(labelSelector string) ApiListRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListRbacAuthorizationV1NamespacedRoleBindingRequest) Limit(limit int32) ApiListRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.limit = &limit
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListRbacAuthorizationV1NamespacedRoleBindingRequest) ResourceVersion(resourceVersion string) ApiListRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListRbacAuthorizationV1NamespacedRoleBindingRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiListRbacAuthorizationV1NamespacedRoleBindingRequest) SendInitialEvents(sendInitialEvents bool) ApiListRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListRbacAuthorizationV1NamespacedRoleBindingRequest) TimeoutSeconds(timeoutSeconds int32) ApiListRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListRbacAuthorizationV1NamespacedRoleBindingRequest) Watch(watch bool) ApiListRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.watch = &watch
	return r
}

func (r ApiListRbacAuthorizationV1NamespacedRoleBindingRequest) Execute() (*IoK8sApiRbacV1RoleBindingList, *http.Response, error) {
	return r.ApiService.ListRbacAuthorizationV1NamespacedRoleBindingExecute(r)
}

/*
ListRbacAuthorizationV1NamespacedRoleBinding Method for ListRbacAuthorizationV1NamespacedRoleBinding

list or watch objects of kind RoleBinding

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiListRbacAuthorizationV1NamespacedRoleBindingRequest
*/
func (a *RbacAuthorizationV1ApiService) ListRbacAuthorizationV1NamespacedRoleBinding(ctx context.Context, namespace string) ApiListRbacAuthorizationV1NamespacedRoleBindingRequest {
	return ApiListRbacAuthorizationV1NamespacedRoleBindingRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1RoleBindingList
func (a *RbacAuthorizationV1ApiService) ListRbacAuthorizationV1NamespacedRoleBindingExecute(r ApiListRbacAuthorizationV1NamespacedRoleBindingRequest) (*IoK8sApiRbacV1RoleBindingList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1RoleBindingList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.ListRbacAuthorizationV1NamespacedRoleBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest) Continue_(continue_ string) ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest) FieldSelector(fieldSelector string) ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest) LabelSelector(labelSelector string) ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest) Limit(limit int32) ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest) Pretty(pretty string) ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest) ResourceVersion(resourceVersion string) ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest) SendInitialEvents(sendInitialEvents bool) ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest) TimeoutSeconds(timeoutSeconds int32) ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest) Watch(watch bool) ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest {
	r.watch = &watch
	return r
}

func (r ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest) Execute() (*IoK8sApiRbacV1RoleBindingList, *http.Response, error) {
	return r.ApiService.ListRbacAuthorizationV1RoleBindingForAllNamespacesExecute(r)
}

/*
ListRbacAuthorizationV1RoleBindingForAllNamespaces Method for ListRbacAuthorizationV1RoleBindingForAllNamespaces

list or watch objects of kind RoleBinding

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest
*/
func (a *RbacAuthorizationV1ApiService) ListRbacAuthorizationV1RoleBindingForAllNamespaces(ctx context.Context) ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest {
	return ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1RoleBindingList
func (a *RbacAuthorizationV1ApiService) ListRbacAuthorizationV1RoleBindingForAllNamespacesExecute(r ApiListRbacAuthorizationV1RoleBindingForAllNamespacesRequest) (*IoK8sApiRbacV1RoleBindingList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1RoleBindingList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.ListRbacAuthorizationV1RoleBindingForAllNamespaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/rolebindings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListRbacAuthorizationV1RoleForAllNamespacesRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiListRbacAuthorizationV1RoleForAllNamespacesRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiListRbacAuthorizationV1RoleForAllNamespacesRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListRbacAuthorizationV1RoleForAllNamespacesRequest) Continue_(continue_ string) ApiListRbacAuthorizationV1RoleForAllNamespacesRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListRbacAuthorizationV1RoleForAllNamespacesRequest) FieldSelector(fieldSelector string) ApiListRbacAuthorizationV1RoleForAllNamespacesRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiListRbacAuthorizationV1RoleForAllNamespacesRequest) LabelSelector(labelSelector string) ApiListRbacAuthorizationV1RoleForAllNamespacesRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListRbacAuthorizationV1RoleForAllNamespacesRequest) Limit(limit int32) ApiListRbacAuthorizationV1RoleForAllNamespacesRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiListRbacAuthorizationV1RoleForAllNamespacesRequest) Pretty(pretty string) ApiListRbacAuthorizationV1RoleForAllNamespacesRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListRbacAuthorizationV1RoleForAllNamespacesRequest) ResourceVersion(resourceVersion string) ApiListRbacAuthorizationV1RoleForAllNamespacesRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiListRbacAuthorizationV1RoleForAllNamespacesRequest) ResourceVersionMatch(resourceVersionMatch string) ApiListRbacAuthorizationV1RoleForAllNamespacesRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiListRbacAuthorizationV1RoleForAllNamespacesRequest) SendInitialEvents(sendInitialEvents bool) ApiListRbacAuthorizationV1RoleForAllNamespacesRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiListRbacAuthorizationV1RoleForAllNamespacesRequest) TimeoutSeconds(timeoutSeconds int32) ApiListRbacAuthorizationV1RoleForAllNamespacesRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListRbacAuthorizationV1RoleForAllNamespacesRequest) Watch(watch bool) ApiListRbacAuthorizationV1RoleForAllNamespacesRequest {
	r.watch = &watch
	return r
}

func (r ApiListRbacAuthorizationV1RoleForAllNamespacesRequest) Execute() (*IoK8sApiRbacV1RoleList, *http.Response, error) {
	return r.ApiService.ListRbacAuthorizationV1RoleForAllNamespacesExecute(r)
}

/*
ListRbacAuthorizationV1RoleForAllNamespaces Method for ListRbacAuthorizationV1RoleForAllNamespaces

list or watch objects of kind Role

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListRbacAuthorizationV1RoleForAllNamespacesRequest
*/
func (a *RbacAuthorizationV1ApiService) ListRbacAuthorizationV1RoleForAllNamespaces(ctx context.Context) ApiListRbacAuthorizationV1RoleForAllNamespacesRequest {
	return ApiListRbacAuthorizationV1RoleForAllNamespacesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1RoleList
func (a *RbacAuthorizationV1ApiService) ListRbacAuthorizationV1RoleForAllNamespacesExecute(r ApiListRbacAuthorizationV1RoleForAllNamespacesRequest) (*IoK8sApiRbacV1RoleList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1RoleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.ListRbacAuthorizationV1RoleForAllNamespaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/roles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchRbacAuthorizationV1ClusterRoleRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	name string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
	force *bool
}

func (r ApiPatchRbacAuthorizationV1ClusterRoleRequest) Body(body map[string]interface{}) ApiPatchRbacAuthorizationV1ClusterRoleRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiPatchRbacAuthorizationV1ClusterRoleRequest) Pretty(pretty string) ApiPatchRbacAuthorizationV1ClusterRoleRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchRbacAuthorizationV1ClusterRoleRequest) DryRun(dryRun string) ApiPatchRbacAuthorizationV1ClusterRoleRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchRbacAuthorizationV1ClusterRoleRequest) FieldManager(fieldManager string) ApiPatchRbacAuthorizationV1ClusterRoleRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiPatchRbacAuthorizationV1ClusterRoleRequest) FieldValidation(fieldValidation string) ApiPatchRbacAuthorizationV1ClusterRoleRequest {
	r.fieldValidation = &fieldValidation
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchRbacAuthorizationV1ClusterRoleRequest) Force(force bool) ApiPatchRbacAuthorizationV1ClusterRoleRequest {
	r.force = &force
	return r
}

func (r ApiPatchRbacAuthorizationV1ClusterRoleRequest) Execute() (*IoK8sApiRbacV1ClusterRole, *http.Response, error) {
	return r.ApiService.PatchRbacAuthorizationV1ClusterRoleExecute(r)
}

/*
PatchRbacAuthorizationV1ClusterRole Method for PatchRbacAuthorizationV1ClusterRole

partially update the specified ClusterRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ClusterRole
 @return ApiPatchRbacAuthorizationV1ClusterRoleRequest
*/
func (a *RbacAuthorizationV1ApiService) PatchRbacAuthorizationV1ClusterRole(ctx context.Context, name string) ApiPatchRbacAuthorizationV1ClusterRoleRequest {
	return ApiPatchRbacAuthorizationV1ClusterRoleRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1ClusterRole
func (a *RbacAuthorizationV1ApiService) PatchRbacAuthorizationV1ClusterRoleExecute(r ApiPatchRbacAuthorizationV1ClusterRoleRequest) (*IoK8sApiRbacV1ClusterRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1ClusterRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.PatchRbacAuthorizationV1ClusterRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchRbacAuthorizationV1ClusterRoleBindingRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	name string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
	force *bool
}

func (r ApiPatchRbacAuthorizationV1ClusterRoleBindingRequest) Body(body map[string]interface{}) ApiPatchRbacAuthorizationV1ClusterRoleBindingRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiPatchRbacAuthorizationV1ClusterRoleBindingRequest) Pretty(pretty string) ApiPatchRbacAuthorizationV1ClusterRoleBindingRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchRbacAuthorizationV1ClusterRoleBindingRequest) DryRun(dryRun string) ApiPatchRbacAuthorizationV1ClusterRoleBindingRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchRbacAuthorizationV1ClusterRoleBindingRequest) FieldManager(fieldManager string) ApiPatchRbacAuthorizationV1ClusterRoleBindingRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiPatchRbacAuthorizationV1ClusterRoleBindingRequest) FieldValidation(fieldValidation string) ApiPatchRbacAuthorizationV1ClusterRoleBindingRequest {
	r.fieldValidation = &fieldValidation
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchRbacAuthorizationV1ClusterRoleBindingRequest) Force(force bool) ApiPatchRbacAuthorizationV1ClusterRoleBindingRequest {
	r.force = &force
	return r
}

func (r ApiPatchRbacAuthorizationV1ClusterRoleBindingRequest) Execute() (*IoK8sApiRbacV1ClusterRoleBinding, *http.Response, error) {
	return r.ApiService.PatchRbacAuthorizationV1ClusterRoleBindingExecute(r)
}

/*
PatchRbacAuthorizationV1ClusterRoleBinding Method for PatchRbacAuthorizationV1ClusterRoleBinding

partially update the specified ClusterRoleBinding

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ClusterRoleBinding
 @return ApiPatchRbacAuthorizationV1ClusterRoleBindingRequest
*/
func (a *RbacAuthorizationV1ApiService) PatchRbacAuthorizationV1ClusterRoleBinding(ctx context.Context, name string) ApiPatchRbacAuthorizationV1ClusterRoleBindingRequest {
	return ApiPatchRbacAuthorizationV1ClusterRoleBindingRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1ClusterRoleBinding
func (a *RbacAuthorizationV1ApiService) PatchRbacAuthorizationV1ClusterRoleBindingExecute(r ApiPatchRbacAuthorizationV1ClusterRoleBindingRequest) (*IoK8sApiRbacV1ClusterRoleBinding, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1ClusterRoleBinding
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.PatchRbacAuthorizationV1ClusterRoleBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchRbacAuthorizationV1NamespacedRoleRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	name string
	namespace string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
	force *bool
}

func (r ApiPatchRbacAuthorizationV1NamespacedRoleRequest) Body(body map[string]interface{}) ApiPatchRbacAuthorizationV1NamespacedRoleRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiPatchRbacAuthorizationV1NamespacedRoleRequest) Pretty(pretty string) ApiPatchRbacAuthorizationV1NamespacedRoleRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchRbacAuthorizationV1NamespacedRoleRequest) DryRun(dryRun string) ApiPatchRbacAuthorizationV1NamespacedRoleRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchRbacAuthorizationV1NamespacedRoleRequest) FieldManager(fieldManager string) ApiPatchRbacAuthorizationV1NamespacedRoleRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiPatchRbacAuthorizationV1NamespacedRoleRequest) FieldValidation(fieldValidation string) ApiPatchRbacAuthorizationV1NamespacedRoleRequest {
	r.fieldValidation = &fieldValidation
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchRbacAuthorizationV1NamespacedRoleRequest) Force(force bool) ApiPatchRbacAuthorizationV1NamespacedRoleRequest {
	r.force = &force
	return r
}

func (r ApiPatchRbacAuthorizationV1NamespacedRoleRequest) Execute() (*IoK8sApiRbacV1Role, *http.Response, error) {
	return r.ApiService.PatchRbacAuthorizationV1NamespacedRoleExecute(r)
}

/*
PatchRbacAuthorizationV1NamespacedRole Method for PatchRbacAuthorizationV1NamespacedRole

partially update the specified Role

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the Role
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiPatchRbacAuthorizationV1NamespacedRoleRequest
*/
func (a *RbacAuthorizationV1ApiService) PatchRbacAuthorizationV1NamespacedRole(ctx context.Context, name string, namespace string) ApiPatchRbacAuthorizationV1NamespacedRoleRequest {
	return ApiPatchRbacAuthorizationV1NamespacedRoleRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1Role
func (a *RbacAuthorizationV1ApiService) PatchRbacAuthorizationV1NamespacedRoleExecute(r ApiPatchRbacAuthorizationV1NamespacedRoleRequest) (*IoK8sApiRbacV1Role, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1Role
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.PatchRbacAuthorizationV1NamespacedRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchRbacAuthorizationV1NamespacedRoleBindingRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	name string
	namespace string
	body *map[string]interface{}
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
	force *bool
}

func (r ApiPatchRbacAuthorizationV1NamespacedRoleBindingRequest) Body(body map[string]interface{}) ApiPatchRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiPatchRbacAuthorizationV1NamespacedRoleBindingRequest) Pretty(pretty string) ApiPatchRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiPatchRbacAuthorizationV1NamespacedRoleBindingRequest) DryRun(dryRun string) ApiPatchRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
func (r ApiPatchRbacAuthorizationV1NamespacedRoleBindingRequest) FieldManager(fieldManager string) ApiPatchRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiPatchRbacAuthorizationV1NamespacedRoleBindingRequest) FieldValidation(fieldValidation string) ApiPatchRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.fieldValidation = &fieldValidation
	return r
}

// Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
func (r ApiPatchRbacAuthorizationV1NamespacedRoleBindingRequest) Force(force bool) ApiPatchRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.force = &force
	return r
}

func (r ApiPatchRbacAuthorizationV1NamespacedRoleBindingRequest) Execute() (*IoK8sApiRbacV1RoleBinding, *http.Response, error) {
	return r.ApiService.PatchRbacAuthorizationV1NamespacedRoleBindingExecute(r)
}

/*
PatchRbacAuthorizationV1NamespacedRoleBinding Method for PatchRbacAuthorizationV1NamespacedRoleBinding

partially update the specified RoleBinding

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the RoleBinding
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiPatchRbacAuthorizationV1NamespacedRoleBindingRequest
*/
func (a *RbacAuthorizationV1ApiService) PatchRbacAuthorizationV1NamespacedRoleBinding(ctx context.Context, name string, namespace string) ApiPatchRbacAuthorizationV1NamespacedRoleBindingRequest {
	return ApiPatchRbacAuthorizationV1NamespacedRoleBindingRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1RoleBinding
func (a *RbacAuthorizationV1ApiService) PatchRbacAuthorizationV1NamespacedRoleBindingExecute(r ApiPatchRbacAuthorizationV1NamespacedRoleBindingRequest) (*IoK8sApiRbacV1RoleBinding, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1RoleBinding
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.PatchRbacAuthorizationV1NamespacedRoleBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadRbacAuthorizationV1ClusterRoleRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	name string
	pretty *string
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReadRbacAuthorizationV1ClusterRoleRequest) Pretty(pretty string) ApiReadRbacAuthorizationV1ClusterRoleRequest {
	r.pretty = &pretty
	return r
}

func (r ApiReadRbacAuthorizationV1ClusterRoleRequest) Execute() (*IoK8sApiRbacV1ClusterRole, *http.Response, error) {
	return r.ApiService.ReadRbacAuthorizationV1ClusterRoleExecute(r)
}

/*
ReadRbacAuthorizationV1ClusterRole Method for ReadRbacAuthorizationV1ClusterRole

read the specified ClusterRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ClusterRole
 @return ApiReadRbacAuthorizationV1ClusterRoleRequest
*/
func (a *RbacAuthorizationV1ApiService) ReadRbacAuthorizationV1ClusterRole(ctx context.Context, name string) ApiReadRbacAuthorizationV1ClusterRoleRequest {
	return ApiReadRbacAuthorizationV1ClusterRoleRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1ClusterRole
func (a *RbacAuthorizationV1ApiService) ReadRbacAuthorizationV1ClusterRoleExecute(r ApiReadRbacAuthorizationV1ClusterRoleRequest) (*IoK8sApiRbacV1ClusterRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1ClusterRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.ReadRbacAuthorizationV1ClusterRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadRbacAuthorizationV1ClusterRoleBindingRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	name string
	pretty *string
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReadRbacAuthorizationV1ClusterRoleBindingRequest) Pretty(pretty string) ApiReadRbacAuthorizationV1ClusterRoleBindingRequest {
	r.pretty = &pretty
	return r
}

func (r ApiReadRbacAuthorizationV1ClusterRoleBindingRequest) Execute() (*IoK8sApiRbacV1ClusterRoleBinding, *http.Response, error) {
	return r.ApiService.ReadRbacAuthorizationV1ClusterRoleBindingExecute(r)
}

/*
ReadRbacAuthorizationV1ClusterRoleBinding Method for ReadRbacAuthorizationV1ClusterRoleBinding

read the specified ClusterRoleBinding

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ClusterRoleBinding
 @return ApiReadRbacAuthorizationV1ClusterRoleBindingRequest
*/
func (a *RbacAuthorizationV1ApiService) ReadRbacAuthorizationV1ClusterRoleBinding(ctx context.Context, name string) ApiReadRbacAuthorizationV1ClusterRoleBindingRequest {
	return ApiReadRbacAuthorizationV1ClusterRoleBindingRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1ClusterRoleBinding
func (a *RbacAuthorizationV1ApiService) ReadRbacAuthorizationV1ClusterRoleBindingExecute(r ApiReadRbacAuthorizationV1ClusterRoleBindingRequest) (*IoK8sApiRbacV1ClusterRoleBinding, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1ClusterRoleBinding
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.ReadRbacAuthorizationV1ClusterRoleBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadRbacAuthorizationV1NamespacedRoleRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	name string
	namespace string
	pretty *string
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReadRbacAuthorizationV1NamespacedRoleRequest) Pretty(pretty string) ApiReadRbacAuthorizationV1NamespacedRoleRequest {
	r.pretty = &pretty
	return r
}

func (r ApiReadRbacAuthorizationV1NamespacedRoleRequest) Execute() (*IoK8sApiRbacV1Role, *http.Response, error) {
	return r.ApiService.ReadRbacAuthorizationV1NamespacedRoleExecute(r)
}

/*
ReadRbacAuthorizationV1NamespacedRole Method for ReadRbacAuthorizationV1NamespacedRole

read the specified Role

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the Role
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReadRbacAuthorizationV1NamespacedRoleRequest
*/
func (a *RbacAuthorizationV1ApiService) ReadRbacAuthorizationV1NamespacedRole(ctx context.Context, name string, namespace string) ApiReadRbacAuthorizationV1NamespacedRoleRequest {
	return ApiReadRbacAuthorizationV1NamespacedRoleRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1Role
func (a *RbacAuthorizationV1ApiService) ReadRbacAuthorizationV1NamespacedRoleExecute(r ApiReadRbacAuthorizationV1NamespacedRoleRequest) (*IoK8sApiRbacV1Role, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1Role
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.ReadRbacAuthorizationV1NamespacedRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadRbacAuthorizationV1NamespacedRoleBindingRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	name string
	namespace string
	pretty *string
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReadRbacAuthorizationV1NamespacedRoleBindingRequest) Pretty(pretty string) ApiReadRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.pretty = &pretty
	return r
}

func (r ApiReadRbacAuthorizationV1NamespacedRoleBindingRequest) Execute() (*IoK8sApiRbacV1RoleBinding, *http.Response, error) {
	return r.ApiService.ReadRbacAuthorizationV1NamespacedRoleBindingExecute(r)
}

/*
ReadRbacAuthorizationV1NamespacedRoleBinding Method for ReadRbacAuthorizationV1NamespacedRoleBinding

read the specified RoleBinding

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the RoleBinding
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReadRbacAuthorizationV1NamespacedRoleBindingRequest
*/
func (a *RbacAuthorizationV1ApiService) ReadRbacAuthorizationV1NamespacedRoleBinding(ctx context.Context, name string, namespace string) ApiReadRbacAuthorizationV1NamespacedRoleBindingRequest {
	return ApiReadRbacAuthorizationV1NamespacedRoleBindingRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1RoleBinding
func (a *RbacAuthorizationV1ApiService) ReadRbacAuthorizationV1NamespacedRoleBindingExecute(r ApiReadRbacAuthorizationV1NamespacedRoleBindingRequest) (*IoK8sApiRbacV1RoleBinding, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1RoleBinding
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.ReadRbacAuthorizationV1NamespacedRoleBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceRbacAuthorizationV1ClusterRoleRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	name string
	body *IoK8sApiRbacV1ClusterRole
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

func (r ApiReplaceRbacAuthorizationV1ClusterRoleRequest) Body(body IoK8sApiRbacV1ClusterRole) ApiReplaceRbacAuthorizationV1ClusterRoleRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReplaceRbacAuthorizationV1ClusterRoleRequest) Pretty(pretty string) ApiReplaceRbacAuthorizationV1ClusterRoleRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceRbacAuthorizationV1ClusterRoleRequest) DryRun(dryRun string) ApiReplaceRbacAuthorizationV1ClusterRoleRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceRbacAuthorizationV1ClusterRoleRequest) FieldManager(fieldManager string) ApiReplaceRbacAuthorizationV1ClusterRoleRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiReplaceRbacAuthorizationV1ClusterRoleRequest) FieldValidation(fieldValidation string) ApiReplaceRbacAuthorizationV1ClusterRoleRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiReplaceRbacAuthorizationV1ClusterRoleRequest) Execute() (*IoK8sApiRbacV1ClusterRole, *http.Response, error) {
	return r.ApiService.ReplaceRbacAuthorizationV1ClusterRoleExecute(r)
}

/*
ReplaceRbacAuthorizationV1ClusterRole Method for ReplaceRbacAuthorizationV1ClusterRole

replace the specified ClusterRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ClusterRole
 @return ApiReplaceRbacAuthorizationV1ClusterRoleRequest
*/
func (a *RbacAuthorizationV1ApiService) ReplaceRbacAuthorizationV1ClusterRole(ctx context.Context, name string) ApiReplaceRbacAuthorizationV1ClusterRoleRequest {
	return ApiReplaceRbacAuthorizationV1ClusterRoleRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1ClusterRole
func (a *RbacAuthorizationV1ApiService) ReplaceRbacAuthorizationV1ClusterRoleExecute(r ApiReplaceRbacAuthorizationV1ClusterRoleRequest) (*IoK8sApiRbacV1ClusterRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1ClusterRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.ReplaceRbacAuthorizationV1ClusterRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceRbacAuthorizationV1ClusterRoleBindingRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	name string
	body *IoK8sApiRbacV1ClusterRoleBinding
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

func (r ApiReplaceRbacAuthorizationV1ClusterRoleBindingRequest) Body(body IoK8sApiRbacV1ClusterRoleBinding) ApiReplaceRbacAuthorizationV1ClusterRoleBindingRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReplaceRbacAuthorizationV1ClusterRoleBindingRequest) Pretty(pretty string) ApiReplaceRbacAuthorizationV1ClusterRoleBindingRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceRbacAuthorizationV1ClusterRoleBindingRequest) DryRun(dryRun string) ApiReplaceRbacAuthorizationV1ClusterRoleBindingRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceRbacAuthorizationV1ClusterRoleBindingRequest) FieldManager(fieldManager string) ApiReplaceRbacAuthorizationV1ClusterRoleBindingRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiReplaceRbacAuthorizationV1ClusterRoleBindingRequest) FieldValidation(fieldValidation string) ApiReplaceRbacAuthorizationV1ClusterRoleBindingRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiReplaceRbacAuthorizationV1ClusterRoleBindingRequest) Execute() (*IoK8sApiRbacV1ClusterRoleBinding, *http.Response, error) {
	return r.ApiService.ReplaceRbacAuthorizationV1ClusterRoleBindingExecute(r)
}

/*
ReplaceRbacAuthorizationV1ClusterRoleBinding Method for ReplaceRbacAuthorizationV1ClusterRoleBinding

replace the specified ClusterRoleBinding

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ClusterRoleBinding
 @return ApiReplaceRbacAuthorizationV1ClusterRoleBindingRequest
*/
func (a *RbacAuthorizationV1ApiService) ReplaceRbacAuthorizationV1ClusterRoleBinding(ctx context.Context, name string) ApiReplaceRbacAuthorizationV1ClusterRoleBindingRequest {
	return ApiReplaceRbacAuthorizationV1ClusterRoleBindingRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1ClusterRoleBinding
func (a *RbacAuthorizationV1ApiService) ReplaceRbacAuthorizationV1ClusterRoleBindingExecute(r ApiReplaceRbacAuthorizationV1ClusterRoleBindingRequest) (*IoK8sApiRbacV1ClusterRoleBinding, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1ClusterRoleBinding
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.ReplaceRbacAuthorizationV1ClusterRoleBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceRbacAuthorizationV1NamespacedRoleRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	name string
	namespace string
	body *IoK8sApiRbacV1Role
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

func (r ApiReplaceRbacAuthorizationV1NamespacedRoleRequest) Body(body IoK8sApiRbacV1Role) ApiReplaceRbacAuthorizationV1NamespacedRoleRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReplaceRbacAuthorizationV1NamespacedRoleRequest) Pretty(pretty string) ApiReplaceRbacAuthorizationV1NamespacedRoleRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceRbacAuthorizationV1NamespacedRoleRequest) DryRun(dryRun string) ApiReplaceRbacAuthorizationV1NamespacedRoleRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceRbacAuthorizationV1NamespacedRoleRequest) FieldManager(fieldManager string) ApiReplaceRbacAuthorizationV1NamespacedRoleRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiReplaceRbacAuthorizationV1NamespacedRoleRequest) FieldValidation(fieldValidation string) ApiReplaceRbacAuthorizationV1NamespacedRoleRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiReplaceRbacAuthorizationV1NamespacedRoleRequest) Execute() (*IoK8sApiRbacV1Role, *http.Response, error) {
	return r.ApiService.ReplaceRbacAuthorizationV1NamespacedRoleExecute(r)
}

/*
ReplaceRbacAuthorizationV1NamespacedRole Method for ReplaceRbacAuthorizationV1NamespacedRole

replace the specified Role

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the Role
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReplaceRbacAuthorizationV1NamespacedRoleRequest
*/
func (a *RbacAuthorizationV1ApiService) ReplaceRbacAuthorizationV1NamespacedRole(ctx context.Context, name string, namespace string) ApiReplaceRbacAuthorizationV1NamespacedRoleRequest {
	return ApiReplaceRbacAuthorizationV1NamespacedRoleRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1Role
func (a *RbacAuthorizationV1ApiService) ReplaceRbacAuthorizationV1NamespacedRoleExecute(r ApiReplaceRbacAuthorizationV1NamespacedRoleRequest) (*IoK8sApiRbacV1Role, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1Role
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.ReplaceRbacAuthorizationV1NamespacedRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceRbacAuthorizationV1NamespacedRoleBindingRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	name string
	namespace string
	body *IoK8sApiRbacV1RoleBinding
	pretty *string
	dryRun *string
	fieldManager *string
	fieldValidation *string
}

func (r ApiReplaceRbacAuthorizationV1NamespacedRoleBindingRequest) Body(body IoK8sApiRbacV1RoleBinding) ApiReplaceRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.body = &body
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiReplaceRbacAuthorizationV1NamespacedRoleBindingRequest) Pretty(pretty string) ApiReplaceRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.pretty = &pretty
	return r
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (r ApiReplaceRbacAuthorizationV1NamespacedRoleBindingRequest) DryRun(dryRun string) ApiReplaceRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.dryRun = &dryRun
	return r
}

// fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
func (r ApiReplaceRbacAuthorizationV1NamespacedRoleBindingRequest) FieldManager(fieldManager string) ApiReplaceRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.fieldManager = &fieldManager
	return r
}

// fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
func (r ApiReplaceRbacAuthorizationV1NamespacedRoleBindingRequest) FieldValidation(fieldValidation string) ApiReplaceRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.fieldValidation = &fieldValidation
	return r
}

func (r ApiReplaceRbacAuthorizationV1NamespacedRoleBindingRequest) Execute() (*IoK8sApiRbacV1RoleBinding, *http.Response, error) {
	return r.ApiService.ReplaceRbacAuthorizationV1NamespacedRoleBindingExecute(r)
}

/*
ReplaceRbacAuthorizationV1NamespacedRoleBinding Method for ReplaceRbacAuthorizationV1NamespacedRoleBinding

replace the specified RoleBinding

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the RoleBinding
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiReplaceRbacAuthorizationV1NamespacedRoleBindingRequest
*/
func (a *RbacAuthorizationV1ApiService) ReplaceRbacAuthorizationV1NamespacedRoleBinding(ctx context.Context, name string, namespace string) ApiReplaceRbacAuthorizationV1NamespacedRoleBindingRequest {
	return ApiReplaceRbacAuthorizationV1NamespacedRoleBindingRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return IoK8sApiRbacV1RoleBinding
func (a *RbacAuthorizationV1ApiService) ReplaceRbacAuthorizationV1NamespacedRoleBindingExecute(r ApiReplaceRbacAuthorizationV1NamespacedRoleBindingRequest) (*IoK8sApiRbacV1RoleBinding, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApiRbacV1RoleBinding
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.ReplaceRbacAuthorizationV1NamespacedRoleBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryRun", r.dryRun, "")
	}
	if r.fieldManager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldManager", r.fieldManager, "")
	}
	if r.fieldValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldValidation", r.fieldValidation, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchRbacAuthorizationV1ClusterRoleRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	name string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchRbacAuthorizationV1ClusterRoleRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchRbacAuthorizationV1ClusterRoleRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchRbacAuthorizationV1ClusterRoleRequest) Continue_(continue_ string) ApiWatchRbacAuthorizationV1ClusterRoleRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchRbacAuthorizationV1ClusterRoleRequest) FieldSelector(fieldSelector string) ApiWatchRbacAuthorizationV1ClusterRoleRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchRbacAuthorizationV1ClusterRoleRequest) LabelSelector(labelSelector string) ApiWatchRbacAuthorizationV1ClusterRoleRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchRbacAuthorizationV1ClusterRoleRequest) Limit(limit int32) ApiWatchRbacAuthorizationV1ClusterRoleRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchRbacAuthorizationV1ClusterRoleRequest) Pretty(pretty string) ApiWatchRbacAuthorizationV1ClusterRoleRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchRbacAuthorizationV1ClusterRoleRequest) ResourceVersion(resourceVersion string) ApiWatchRbacAuthorizationV1ClusterRoleRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchRbacAuthorizationV1ClusterRoleRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchRbacAuthorizationV1ClusterRoleRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiWatchRbacAuthorizationV1ClusterRoleRequest) SendInitialEvents(sendInitialEvents bool) ApiWatchRbacAuthorizationV1ClusterRoleRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchRbacAuthorizationV1ClusterRoleRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchRbacAuthorizationV1ClusterRoleRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchRbacAuthorizationV1ClusterRoleRequest) Watch(watch bool) ApiWatchRbacAuthorizationV1ClusterRoleRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchRbacAuthorizationV1ClusterRoleRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchRbacAuthorizationV1ClusterRoleExecute(r)
}

/*
WatchRbacAuthorizationV1ClusterRole Method for WatchRbacAuthorizationV1ClusterRole

watch changes to an object of kind ClusterRole. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ClusterRole
 @return ApiWatchRbacAuthorizationV1ClusterRoleRequest
*/
func (a *RbacAuthorizationV1ApiService) WatchRbacAuthorizationV1ClusterRole(ctx context.Context, name string) ApiWatchRbacAuthorizationV1ClusterRoleRequest {
	return ApiWatchRbacAuthorizationV1ClusterRoleRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1WatchEvent
func (a *RbacAuthorizationV1ApiService) WatchRbacAuthorizationV1ClusterRoleExecute(r ApiWatchRbacAuthorizationV1ClusterRoleRequest) (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.WatchRbacAuthorizationV1ClusterRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/watch/clusterroles/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	name string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest) Continue_(continue_ string) ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest) FieldSelector(fieldSelector string) ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest) LabelSelector(labelSelector string) ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest) Limit(limit int32) ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest) Pretty(pretty string) ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest) ResourceVersion(resourceVersion string) ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest) SendInitialEvents(sendInitialEvents bool) ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest) Watch(watch bool) ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchRbacAuthorizationV1ClusterRoleBindingExecute(r)
}

/*
WatchRbacAuthorizationV1ClusterRoleBinding Method for WatchRbacAuthorizationV1ClusterRoleBinding

watch changes to an object of kind ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the ClusterRoleBinding
 @return ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest
*/
func (a *RbacAuthorizationV1ApiService) WatchRbacAuthorizationV1ClusterRoleBinding(ctx context.Context, name string) ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest {
	return ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1WatchEvent
func (a *RbacAuthorizationV1ApiService) WatchRbacAuthorizationV1ClusterRoleBindingExecute(r ApiWatchRbacAuthorizationV1ClusterRoleBindingRequest) (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.WatchRbacAuthorizationV1ClusterRoleBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest) Continue_(continue_ string) ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest) FieldSelector(fieldSelector string) ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest) LabelSelector(labelSelector string) ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest) Limit(limit int32) ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest) Pretty(pretty string) ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest) ResourceVersion(resourceVersion string) ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest) SendInitialEvents(sendInitialEvents bool) ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest) Watch(watch bool) ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchRbacAuthorizationV1ClusterRoleBindingListExecute(r)
}

/*
WatchRbacAuthorizationV1ClusterRoleBindingList Method for WatchRbacAuthorizationV1ClusterRoleBindingList

watch individual changes to a list of ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest
*/
func (a *RbacAuthorizationV1ApiService) WatchRbacAuthorizationV1ClusterRoleBindingList(ctx context.Context) ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest {
	return ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1WatchEvent
func (a *RbacAuthorizationV1ApiService) WatchRbacAuthorizationV1ClusterRoleBindingListExecute(r ApiWatchRbacAuthorizationV1ClusterRoleBindingListRequest) (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.WatchRbacAuthorizationV1ClusterRoleBindingList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchRbacAuthorizationV1ClusterRoleListRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchRbacAuthorizationV1ClusterRoleListRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchRbacAuthorizationV1ClusterRoleListRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchRbacAuthorizationV1ClusterRoleListRequest) Continue_(continue_ string) ApiWatchRbacAuthorizationV1ClusterRoleListRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchRbacAuthorizationV1ClusterRoleListRequest) FieldSelector(fieldSelector string) ApiWatchRbacAuthorizationV1ClusterRoleListRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchRbacAuthorizationV1ClusterRoleListRequest) LabelSelector(labelSelector string) ApiWatchRbacAuthorizationV1ClusterRoleListRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchRbacAuthorizationV1ClusterRoleListRequest) Limit(limit int32) ApiWatchRbacAuthorizationV1ClusterRoleListRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchRbacAuthorizationV1ClusterRoleListRequest) Pretty(pretty string) ApiWatchRbacAuthorizationV1ClusterRoleListRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchRbacAuthorizationV1ClusterRoleListRequest) ResourceVersion(resourceVersion string) ApiWatchRbacAuthorizationV1ClusterRoleListRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchRbacAuthorizationV1ClusterRoleListRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchRbacAuthorizationV1ClusterRoleListRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiWatchRbacAuthorizationV1ClusterRoleListRequest) SendInitialEvents(sendInitialEvents bool) ApiWatchRbacAuthorizationV1ClusterRoleListRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchRbacAuthorizationV1ClusterRoleListRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchRbacAuthorizationV1ClusterRoleListRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchRbacAuthorizationV1ClusterRoleListRequest) Watch(watch bool) ApiWatchRbacAuthorizationV1ClusterRoleListRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchRbacAuthorizationV1ClusterRoleListRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchRbacAuthorizationV1ClusterRoleListExecute(r)
}

/*
WatchRbacAuthorizationV1ClusterRoleList Method for WatchRbacAuthorizationV1ClusterRoleList

watch individual changes to a list of ClusterRole. deprecated: use the 'watch' parameter with a list operation instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWatchRbacAuthorizationV1ClusterRoleListRequest
*/
func (a *RbacAuthorizationV1ApiService) WatchRbacAuthorizationV1ClusterRoleList(ctx context.Context) ApiWatchRbacAuthorizationV1ClusterRoleListRequest {
	return ApiWatchRbacAuthorizationV1ClusterRoleListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1WatchEvent
func (a *RbacAuthorizationV1ApiService) WatchRbacAuthorizationV1ClusterRoleListExecute(r ApiWatchRbacAuthorizationV1ClusterRoleListRequest) (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.WatchRbacAuthorizationV1ClusterRoleList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/watch/clusterroles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchRbacAuthorizationV1NamespacedRoleRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	name string
	namespace string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchRbacAuthorizationV1NamespacedRoleRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleRequest) Continue_(continue_ string) ApiWatchRbacAuthorizationV1NamespacedRoleRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleRequest) FieldSelector(fieldSelector string) ApiWatchRbacAuthorizationV1NamespacedRoleRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleRequest) LabelSelector(labelSelector string) ApiWatchRbacAuthorizationV1NamespacedRoleRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleRequest) Limit(limit int32) ApiWatchRbacAuthorizationV1NamespacedRoleRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleRequest) Pretty(pretty string) ApiWatchRbacAuthorizationV1NamespacedRoleRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchRbacAuthorizationV1NamespacedRoleRequest) ResourceVersion(resourceVersion string) ApiWatchRbacAuthorizationV1NamespacedRoleRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchRbacAuthorizationV1NamespacedRoleRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchRbacAuthorizationV1NamespacedRoleRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleRequest) SendInitialEvents(sendInitialEvents bool) ApiWatchRbacAuthorizationV1NamespacedRoleRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchRbacAuthorizationV1NamespacedRoleRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleRequest) Watch(watch bool) ApiWatchRbacAuthorizationV1NamespacedRoleRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchRbacAuthorizationV1NamespacedRoleRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchRbacAuthorizationV1NamespacedRoleExecute(r)
}

/*
WatchRbacAuthorizationV1NamespacedRole Method for WatchRbacAuthorizationV1NamespacedRole

watch changes to an object of kind Role. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the Role
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiWatchRbacAuthorizationV1NamespacedRoleRequest
*/
func (a *RbacAuthorizationV1ApiService) WatchRbacAuthorizationV1NamespacedRole(ctx context.Context, name string, namespace string) ApiWatchRbacAuthorizationV1NamespacedRoleRequest {
	return ApiWatchRbacAuthorizationV1NamespacedRoleRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1WatchEvent
func (a *RbacAuthorizationV1ApiService) WatchRbacAuthorizationV1NamespacedRoleExecute(r ApiWatchRbacAuthorizationV1NamespacedRoleRequest) (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.WatchRbacAuthorizationV1NamespacedRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	name string
	namespace string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest) Continue_(continue_ string) ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest) FieldSelector(fieldSelector string) ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest) LabelSelector(labelSelector string) ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest) Limit(limit int32) ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest) Pretty(pretty string) ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest) ResourceVersion(resourceVersion string) ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest) SendInitialEvents(sendInitialEvents bool) ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest) Watch(watch bool) ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchRbacAuthorizationV1NamespacedRoleBindingExecute(r)
}

/*
WatchRbacAuthorizationV1NamespacedRoleBinding Method for WatchRbacAuthorizationV1NamespacedRoleBinding

watch changes to an object of kind RoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name of the RoleBinding
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest
*/
func (a *RbacAuthorizationV1ApiService) WatchRbacAuthorizationV1NamespacedRoleBinding(ctx context.Context, name string, namespace string) ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest {
	return ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1WatchEvent
func (a *RbacAuthorizationV1ApiService) WatchRbacAuthorizationV1NamespacedRoleBindingExecute(r ApiWatchRbacAuthorizationV1NamespacedRoleBindingRequest) (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.WatchRbacAuthorizationV1NamespacedRoleBinding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	namespace string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest) Continue_(continue_ string) ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest) FieldSelector(fieldSelector string) ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest) LabelSelector(labelSelector string) ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest) Limit(limit int32) ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest) Pretty(pretty string) ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest) ResourceVersion(resourceVersion string) ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest) SendInitialEvents(sendInitialEvents bool) ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest) Watch(watch bool) ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchRbacAuthorizationV1NamespacedRoleBindingListExecute(r)
}

/*
WatchRbacAuthorizationV1NamespacedRoleBindingList Method for WatchRbacAuthorizationV1NamespacedRoleBindingList

watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest
*/
func (a *RbacAuthorizationV1ApiService) WatchRbacAuthorizationV1NamespacedRoleBindingList(ctx context.Context, namespace string) ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest {
	return ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1WatchEvent
func (a *RbacAuthorizationV1ApiService) WatchRbacAuthorizationV1NamespacedRoleBindingListExecute(r ApiWatchRbacAuthorizationV1NamespacedRoleBindingListRequest) (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.WatchRbacAuthorizationV1NamespacedRoleBindingList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchRbacAuthorizationV1NamespacedRoleListRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	namespace string
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleListRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchRbacAuthorizationV1NamespacedRoleListRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleListRequest) Continue_(continue_ string) ApiWatchRbacAuthorizationV1NamespacedRoleListRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleListRequest) FieldSelector(fieldSelector string) ApiWatchRbacAuthorizationV1NamespacedRoleListRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleListRequest) LabelSelector(labelSelector string) ApiWatchRbacAuthorizationV1NamespacedRoleListRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleListRequest) Limit(limit int32) ApiWatchRbacAuthorizationV1NamespacedRoleListRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleListRequest) Pretty(pretty string) ApiWatchRbacAuthorizationV1NamespacedRoleListRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchRbacAuthorizationV1NamespacedRoleListRequest) ResourceVersion(resourceVersion string) ApiWatchRbacAuthorizationV1NamespacedRoleListRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchRbacAuthorizationV1NamespacedRoleListRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchRbacAuthorizationV1NamespacedRoleListRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleListRequest) SendInitialEvents(sendInitialEvents bool) ApiWatchRbacAuthorizationV1NamespacedRoleListRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleListRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchRbacAuthorizationV1NamespacedRoleListRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchRbacAuthorizationV1NamespacedRoleListRequest) Watch(watch bool) ApiWatchRbacAuthorizationV1NamespacedRoleListRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchRbacAuthorizationV1NamespacedRoleListRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchRbacAuthorizationV1NamespacedRoleListExecute(r)
}

/*
WatchRbacAuthorizationV1NamespacedRoleList Method for WatchRbacAuthorizationV1NamespacedRoleList

watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace object name and auth scope, such as for teams and projects
 @return ApiWatchRbacAuthorizationV1NamespacedRoleListRequest
*/
func (a *RbacAuthorizationV1ApiService) WatchRbacAuthorizationV1NamespacedRoleList(ctx context.Context, namespace string) ApiWatchRbacAuthorizationV1NamespacedRoleListRequest {
	return ApiWatchRbacAuthorizationV1NamespacedRoleListRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1WatchEvent
func (a *RbacAuthorizationV1ApiService) WatchRbacAuthorizationV1NamespacedRoleListExecute(r ApiWatchRbacAuthorizationV1NamespacedRoleListRequest) (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.WatchRbacAuthorizationV1NamespacedRoleList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest) Continue_(continue_ string) ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest) FieldSelector(fieldSelector string) ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest) LabelSelector(labelSelector string) ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest) Limit(limit int32) ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest) Pretty(pretty string) ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest) ResourceVersion(resourceVersion string) ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest) SendInitialEvents(sendInitialEvents bool) ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest) Watch(watch bool) ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchRbacAuthorizationV1RoleBindingListForAllNamespacesExecute(r)
}

/*
WatchRbacAuthorizationV1RoleBindingListForAllNamespaces Method for WatchRbacAuthorizationV1RoleBindingListForAllNamespaces

watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest
*/
func (a *RbacAuthorizationV1ApiService) WatchRbacAuthorizationV1RoleBindingListForAllNamespaces(ctx context.Context) ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest {
	return ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1WatchEvent
func (a *RbacAuthorizationV1ApiService) WatchRbacAuthorizationV1RoleBindingListForAllNamespacesExecute(r ApiWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest) (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.WatchRbacAuthorizationV1RoleBindingListForAllNamespaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/watch/rolebindings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest struct {
	ctx context.Context
	ApiService *RbacAuthorizationV1ApiService
	allowWatchBookmarks *bool
	continue_ *string
	fieldSelector *string
	labelSelector *string
	limit *int32
	pretty *string
	resourceVersion *string
	resourceVersionMatch *string
	sendInitialEvents *bool
	timeoutSeconds *int32
	watch *bool
}

// allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
func (r ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest) AllowWatchBookmarks(allowWatchBookmarks bool) ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest {
	r.allowWatchBookmarks = &allowWatchBookmarks
	return r
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest) Continue_(continue_ string) ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest) FieldSelector(fieldSelector string) ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything.
func (r ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest) LabelSelector(labelSelector string) ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest) Limit(limit int32) ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest {
	r.limit = &limit
	return r
}

// If &#39;true&#39;, then the output is pretty printed.
func (r ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest) Pretty(pretty string) ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest {
	r.pretty = &pretty
	return r
}

// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest) ResourceVersion(resourceVersion string) ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
func (r ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest) ResourceVersionMatch(resourceVersionMatch string) ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest {
	r.resourceVersionMatch = &resourceVersionMatch
	return r
}

// &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
func (r ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest) SendInitialEvents(sendInitialEvents bool) ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest {
	r.sendInitialEvents = &sendInitialEvents
	return r
}

// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
func (r ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest) TimeoutSeconds(timeoutSeconds int32) ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest) Watch(watch bool) ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest {
	r.watch = &watch
	return r
}

func (r ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest) Execute() (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	return r.ApiService.WatchRbacAuthorizationV1RoleListForAllNamespacesExecute(r)
}

/*
WatchRbacAuthorizationV1RoleListForAllNamespaces Method for WatchRbacAuthorizationV1RoleListForAllNamespaces

watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest
*/
func (a *RbacAuthorizationV1ApiService) WatchRbacAuthorizationV1RoleListForAllNamespaces(ctx context.Context) ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest {
	return ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IoK8sApimachineryPkgApisMetaV1WatchEvent
func (a *RbacAuthorizationV1ApiService) WatchRbacAuthorizationV1RoleListForAllNamespacesExecute(r ApiWatchRbacAuthorizationV1RoleListForAllNamespacesRequest) (*IoK8sApimachineryPkgApisMetaV1WatchEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IoK8sApimachineryPkgApisMetaV1WatchEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RbacAuthorizationV1ApiService.WatchRbacAuthorizationV1RoleListForAllNamespaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/rbac.authorization.k8s.io/v1/watch/roles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allowWatchBookmarks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowWatchBookmarks", r.allowWatchBookmarks, "")
	}
	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.resourceVersionMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersionMatch", r.resourceVersionMatch, "")
	}
	if r.sendInitialEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sendInitialEvents", r.sendInitialEvents, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
