/*
Kubernetes

Testing FlowcontrolApiserverV1beta3ApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_FlowcontrolApiserverV1beta3ApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FlowcontrolApiserverV1beta3ApiService CreateFlowcontrolApiserverV1beta3FlowSchema", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.CreateFlowcontrolApiserverV1beta3FlowSchema(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService CreateFlowcontrolApiserverV1beta3PriorityLevelConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.CreateFlowcontrolApiserverV1beta3PriorityLevelConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService DeleteFlowcontrolApiserverV1beta3CollectionFlowSchema", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.DeleteFlowcontrolApiserverV1beta3CollectionFlowSchema(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService DeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.DeleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService DeleteFlowcontrolApiserverV1beta3FlowSchema", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.DeleteFlowcontrolApiserverV1beta3FlowSchema(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService DeleteFlowcontrolApiserverV1beta3PriorityLevelConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.DeleteFlowcontrolApiserverV1beta3PriorityLevelConfiguration(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService GetFlowcontrolApiserverV1beta3APIResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.GetFlowcontrolApiserverV1beta3APIResources(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService ListFlowcontrolApiserverV1beta3FlowSchema", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.ListFlowcontrolApiserverV1beta3FlowSchema(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService ListFlowcontrolApiserverV1beta3PriorityLevelConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.ListFlowcontrolApiserverV1beta3PriorityLevelConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService PatchFlowcontrolApiserverV1beta3FlowSchema", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.PatchFlowcontrolApiserverV1beta3FlowSchema(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService PatchFlowcontrolApiserverV1beta3FlowSchemaStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.PatchFlowcontrolApiserverV1beta3FlowSchemaStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService PatchFlowcontrolApiserverV1beta3PriorityLevelConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.PatchFlowcontrolApiserverV1beta3PriorityLevelConfiguration(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService PatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.PatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService ReadFlowcontrolApiserverV1beta3FlowSchema", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.ReadFlowcontrolApiserverV1beta3FlowSchema(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService ReadFlowcontrolApiserverV1beta3FlowSchemaStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.ReadFlowcontrolApiserverV1beta3FlowSchemaStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService ReadFlowcontrolApiserverV1beta3PriorityLevelConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.ReadFlowcontrolApiserverV1beta3PriorityLevelConfiguration(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService ReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.ReadFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService ReplaceFlowcontrolApiserverV1beta3FlowSchema", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.ReplaceFlowcontrolApiserverV1beta3FlowSchema(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService ReplaceFlowcontrolApiserverV1beta3FlowSchemaStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.ReplaceFlowcontrolApiserverV1beta3FlowSchemaStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfiguration(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.ReplaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService WatchFlowcontrolApiserverV1beta3FlowSchema", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.WatchFlowcontrolApiserverV1beta3FlowSchema(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService WatchFlowcontrolApiserverV1beta3FlowSchemaList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.WatchFlowcontrolApiserverV1beta3FlowSchemaList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService WatchFlowcontrolApiserverV1beta3PriorityLevelConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.WatchFlowcontrolApiserverV1beta3PriorityLevelConfiguration(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowcontrolApiserverV1beta3ApiService WatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlowcontrolApiserverV1beta3Api.WatchFlowcontrolApiserverV1beta3PriorityLevelConfigurationList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
