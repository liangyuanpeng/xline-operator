/*
Kubernetes

Testing AdmissionregistrationV1ApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_AdmissionregistrationV1ApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AdmissionregistrationV1ApiService CreateAdmissionregistrationV1MutatingWebhookConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AdmissionregistrationV1Api.CreateAdmissionregistrationV1MutatingWebhookConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdmissionregistrationV1ApiService CreateAdmissionregistrationV1ValidatingWebhookConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AdmissionregistrationV1Api.CreateAdmissionregistrationV1ValidatingWebhookConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdmissionregistrationV1ApiService DeleteAdmissionregistrationV1CollectionMutatingWebhookConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AdmissionregistrationV1Api.DeleteAdmissionregistrationV1CollectionMutatingWebhookConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdmissionregistrationV1ApiService DeleteAdmissionregistrationV1CollectionValidatingWebhookConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AdmissionregistrationV1Api.DeleteAdmissionregistrationV1CollectionValidatingWebhookConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdmissionregistrationV1ApiService DeleteAdmissionregistrationV1MutatingWebhookConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.AdmissionregistrationV1Api.DeleteAdmissionregistrationV1MutatingWebhookConfiguration(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdmissionregistrationV1ApiService DeleteAdmissionregistrationV1ValidatingWebhookConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.AdmissionregistrationV1Api.DeleteAdmissionregistrationV1ValidatingWebhookConfiguration(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdmissionregistrationV1ApiService GetAdmissionregistrationV1APIResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AdmissionregistrationV1Api.GetAdmissionregistrationV1APIResources(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdmissionregistrationV1ApiService ListAdmissionregistrationV1MutatingWebhookConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AdmissionregistrationV1Api.ListAdmissionregistrationV1MutatingWebhookConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdmissionregistrationV1ApiService ListAdmissionregistrationV1ValidatingWebhookConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AdmissionregistrationV1Api.ListAdmissionregistrationV1ValidatingWebhookConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdmissionregistrationV1ApiService PatchAdmissionregistrationV1MutatingWebhookConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.AdmissionregistrationV1Api.PatchAdmissionregistrationV1MutatingWebhookConfiguration(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdmissionregistrationV1ApiService PatchAdmissionregistrationV1ValidatingWebhookConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.AdmissionregistrationV1Api.PatchAdmissionregistrationV1ValidatingWebhookConfiguration(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdmissionregistrationV1ApiService ReadAdmissionregistrationV1MutatingWebhookConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.AdmissionregistrationV1Api.ReadAdmissionregistrationV1MutatingWebhookConfiguration(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdmissionregistrationV1ApiService ReadAdmissionregistrationV1ValidatingWebhookConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.AdmissionregistrationV1Api.ReadAdmissionregistrationV1ValidatingWebhookConfiguration(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdmissionregistrationV1ApiService ReplaceAdmissionregistrationV1MutatingWebhookConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.AdmissionregistrationV1Api.ReplaceAdmissionregistrationV1MutatingWebhookConfiguration(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdmissionregistrationV1ApiService ReplaceAdmissionregistrationV1ValidatingWebhookConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.AdmissionregistrationV1Api.ReplaceAdmissionregistrationV1ValidatingWebhookConfiguration(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdmissionregistrationV1ApiService WatchAdmissionregistrationV1MutatingWebhookConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.AdmissionregistrationV1Api.WatchAdmissionregistrationV1MutatingWebhookConfiguration(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdmissionregistrationV1ApiService WatchAdmissionregistrationV1MutatingWebhookConfigurationList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AdmissionregistrationV1Api.WatchAdmissionregistrationV1MutatingWebhookConfigurationList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdmissionregistrationV1ApiService WatchAdmissionregistrationV1ValidatingWebhookConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.AdmissionregistrationV1Api.WatchAdmissionregistrationV1ValidatingWebhookConfiguration(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdmissionregistrationV1ApiService WatchAdmissionregistrationV1ValidatingWebhookConfigurationList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AdmissionregistrationV1Api.WatchAdmissionregistrationV1ValidatingWebhookConfigurationList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
