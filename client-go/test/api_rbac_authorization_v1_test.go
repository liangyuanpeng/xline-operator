/*
Kubernetes

Testing RbacAuthorizationV1ApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_RbacAuthorizationV1ApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RbacAuthorizationV1ApiService CreateRbacAuthorizationV1ClusterRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.CreateRbacAuthorizationV1ClusterRole(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService CreateRbacAuthorizationV1ClusterRoleBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.CreateRbacAuthorizationV1ClusterRoleBinding(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService CreateRbacAuthorizationV1NamespacedRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.CreateRbacAuthorizationV1NamespacedRole(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService CreateRbacAuthorizationV1NamespacedRoleBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.CreateRbacAuthorizationV1NamespacedRoleBinding(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService DeleteRbacAuthorizationV1ClusterRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.DeleteRbacAuthorizationV1ClusterRole(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService DeleteRbacAuthorizationV1ClusterRoleBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.DeleteRbacAuthorizationV1ClusterRoleBinding(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService DeleteRbacAuthorizationV1CollectionClusterRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.DeleteRbacAuthorizationV1CollectionClusterRole(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService DeleteRbacAuthorizationV1CollectionClusterRoleBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.DeleteRbacAuthorizationV1CollectionClusterRoleBinding(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService DeleteRbacAuthorizationV1CollectionNamespacedRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.DeleteRbacAuthorizationV1CollectionNamespacedRole(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService DeleteRbacAuthorizationV1CollectionNamespacedRoleBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.DeleteRbacAuthorizationV1CollectionNamespacedRoleBinding(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService DeleteRbacAuthorizationV1NamespacedRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.DeleteRbacAuthorizationV1NamespacedRole(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService DeleteRbacAuthorizationV1NamespacedRoleBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.DeleteRbacAuthorizationV1NamespacedRoleBinding(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService GetRbacAuthorizationV1APIResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.GetRbacAuthorizationV1APIResources(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService ListRbacAuthorizationV1ClusterRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.ListRbacAuthorizationV1ClusterRole(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService ListRbacAuthorizationV1ClusterRoleBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.ListRbacAuthorizationV1ClusterRoleBinding(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService ListRbacAuthorizationV1NamespacedRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.ListRbacAuthorizationV1NamespacedRole(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService ListRbacAuthorizationV1NamespacedRoleBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.ListRbacAuthorizationV1NamespacedRoleBinding(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService ListRbacAuthorizationV1RoleBindingForAllNamespaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.ListRbacAuthorizationV1RoleBindingForAllNamespaces(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService ListRbacAuthorizationV1RoleForAllNamespaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.ListRbacAuthorizationV1RoleForAllNamespaces(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService PatchRbacAuthorizationV1ClusterRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.PatchRbacAuthorizationV1ClusterRole(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService PatchRbacAuthorizationV1ClusterRoleBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.PatchRbacAuthorizationV1ClusterRoleBinding(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService PatchRbacAuthorizationV1NamespacedRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.PatchRbacAuthorizationV1NamespacedRole(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService PatchRbacAuthorizationV1NamespacedRoleBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.PatchRbacAuthorizationV1NamespacedRoleBinding(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService ReadRbacAuthorizationV1ClusterRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.ReadRbacAuthorizationV1ClusterRole(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService ReadRbacAuthorizationV1ClusterRoleBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.ReadRbacAuthorizationV1ClusterRoleBinding(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService ReadRbacAuthorizationV1NamespacedRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.ReadRbacAuthorizationV1NamespacedRole(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService ReadRbacAuthorizationV1NamespacedRoleBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.ReadRbacAuthorizationV1NamespacedRoleBinding(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService ReplaceRbacAuthorizationV1ClusterRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.ReplaceRbacAuthorizationV1ClusterRole(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService ReplaceRbacAuthorizationV1ClusterRoleBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.ReplaceRbacAuthorizationV1ClusterRoleBinding(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService ReplaceRbacAuthorizationV1NamespacedRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.ReplaceRbacAuthorizationV1NamespacedRole(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService ReplaceRbacAuthorizationV1NamespacedRoleBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.ReplaceRbacAuthorizationV1NamespacedRoleBinding(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService WatchRbacAuthorizationV1ClusterRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.WatchRbacAuthorizationV1ClusterRole(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService WatchRbacAuthorizationV1ClusterRoleBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.WatchRbacAuthorizationV1ClusterRoleBinding(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService WatchRbacAuthorizationV1ClusterRoleBindingList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.WatchRbacAuthorizationV1ClusterRoleBindingList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService WatchRbacAuthorizationV1ClusterRoleList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.WatchRbacAuthorizationV1ClusterRoleList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService WatchRbacAuthorizationV1NamespacedRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.WatchRbacAuthorizationV1NamespacedRole(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService WatchRbacAuthorizationV1NamespacedRoleBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.WatchRbacAuthorizationV1NamespacedRoleBinding(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService WatchRbacAuthorizationV1NamespacedRoleBindingList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.WatchRbacAuthorizationV1NamespacedRoleBindingList(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService WatchRbacAuthorizationV1NamespacedRoleList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.WatchRbacAuthorizationV1NamespacedRoleList(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService WatchRbacAuthorizationV1RoleBindingListForAllNamespaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.WatchRbacAuthorizationV1RoleBindingListForAllNamespaces(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RbacAuthorizationV1ApiService WatchRbacAuthorizationV1RoleListForAllNamespaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RbacAuthorizationV1Api.WatchRbacAuthorizationV1RoleListForAllNamespaces(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
