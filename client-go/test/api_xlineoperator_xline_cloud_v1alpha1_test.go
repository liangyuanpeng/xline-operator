/*
Kubernetes

Testing XlineoperatorXlineCloudV1alpha1ApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_XlineoperatorXlineCloudV1alpha1ApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test XlineoperatorXlineCloudV1alpha1ApiService CreateXlineoperatorXlineCloudV1alpha1NamespacedXlineCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.XlineoperatorXlineCloudV1alpha1Api.CreateXlineoperatorXlineCloudV1alpha1NamespacedXlineCluster(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test XlineoperatorXlineCloudV1alpha1ApiService DeleteXlineoperatorXlineCloudV1alpha1CollectionNamespacedXlineCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.XlineoperatorXlineCloudV1alpha1Api.DeleteXlineoperatorXlineCloudV1alpha1CollectionNamespacedXlineCluster(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test XlineoperatorXlineCloudV1alpha1ApiService DeleteXlineoperatorXlineCloudV1alpha1NamespacedXlineCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.XlineoperatorXlineCloudV1alpha1Api.DeleteXlineoperatorXlineCloudV1alpha1NamespacedXlineCluster(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test XlineoperatorXlineCloudV1alpha1ApiService ListXlineoperatorXlineCloudV1alpha1NamespacedXlineCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.XlineoperatorXlineCloudV1alpha1Api.ListXlineoperatorXlineCloudV1alpha1NamespacedXlineCluster(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test XlineoperatorXlineCloudV1alpha1ApiService ListXlineoperatorXlineCloudV1alpha1XlineClusterForAllNamespaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.XlineoperatorXlineCloudV1alpha1Api.ListXlineoperatorXlineCloudV1alpha1XlineClusterForAllNamespaces(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test XlineoperatorXlineCloudV1alpha1ApiService PatchXlineoperatorXlineCloudV1alpha1NamespacedXlineCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.XlineoperatorXlineCloudV1alpha1Api.PatchXlineoperatorXlineCloudV1alpha1NamespacedXlineCluster(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test XlineoperatorXlineCloudV1alpha1ApiService PatchXlineoperatorXlineCloudV1alpha1NamespacedXlineClusterScale", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.XlineoperatorXlineCloudV1alpha1Api.PatchXlineoperatorXlineCloudV1alpha1NamespacedXlineClusterScale(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test XlineoperatorXlineCloudV1alpha1ApiService PatchXlineoperatorXlineCloudV1alpha1NamespacedXlineClusterStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.XlineoperatorXlineCloudV1alpha1Api.PatchXlineoperatorXlineCloudV1alpha1NamespacedXlineClusterStatus(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test XlineoperatorXlineCloudV1alpha1ApiService ReadXlineoperatorXlineCloudV1alpha1NamespacedXlineCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.XlineoperatorXlineCloudV1alpha1Api.ReadXlineoperatorXlineCloudV1alpha1NamespacedXlineCluster(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test XlineoperatorXlineCloudV1alpha1ApiService ReadXlineoperatorXlineCloudV1alpha1NamespacedXlineClusterScale", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.XlineoperatorXlineCloudV1alpha1Api.ReadXlineoperatorXlineCloudV1alpha1NamespacedXlineClusterScale(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test XlineoperatorXlineCloudV1alpha1ApiService ReadXlineoperatorXlineCloudV1alpha1NamespacedXlineClusterStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.XlineoperatorXlineCloudV1alpha1Api.ReadXlineoperatorXlineCloudV1alpha1NamespacedXlineClusterStatus(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test XlineoperatorXlineCloudV1alpha1ApiService ReplaceXlineoperatorXlineCloudV1alpha1NamespacedXlineCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.XlineoperatorXlineCloudV1alpha1Api.ReplaceXlineoperatorXlineCloudV1alpha1NamespacedXlineCluster(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test XlineoperatorXlineCloudV1alpha1ApiService ReplaceXlineoperatorXlineCloudV1alpha1NamespacedXlineClusterScale", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.XlineoperatorXlineCloudV1alpha1Api.ReplaceXlineoperatorXlineCloudV1alpha1NamespacedXlineClusterScale(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test XlineoperatorXlineCloudV1alpha1ApiService ReplaceXlineoperatorXlineCloudV1alpha1NamespacedXlineClusterStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.XlineoperatorXlineCloudV1alpha1Api.ReplaceXlineoperatorXlineCloudV1alpha1NamespacedXlineClusterStatus(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
